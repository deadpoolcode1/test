/** \mainpage Driver Overview
  *
  * \section section_drv_info Driver Information
  * This Sensor Controller Interface driver has been generated by the Texas Instruments Sensor Controller
  * Studio tool:
  * - <b>Project name</b>:     System AGC  CRU CODE
  * - <b>Project file</b>:     C:/Users/Amitg/workspace_v11/crs_tirtos_test/CRU_CC1352P_4_LAUNCHXL_tirtos7_ccs/scif/system_agc_cru.scp
  * - <b>Code prefix</b>:      -
  * - <b>Operating system</b>: TI-RTOS
  * - <b>Tool version</b>:     2.8.0.170
  * - <b>Tool patches</b>:     None
  * - <b>Target chip</b>:      CC1352P1F3, package QFN48 7x7 RGZ, revision E (2.1) or F (3.0)
  * - <b>Created</b>:          2022-12-04 15:20:27.836
  * - <b>Computer</b>:         LAPTOP-V1AGPT0H
  * - <b>User</b>:             Amitg
  *
  * No user-provided resource definitions were used to generate this driver.
  *
  * No user-provided procedure definitions were used to generate this driver.
  *
  * Do not edit the generated source code files other than temporarily for debug purposes. Any
  * modifications will be overwritten by the Sensor Controller Studio when generating new output.
  *
  * \section section_drv_modules Driver Modules
  * The driver is divided into three modules:
  * - \ref module_scif_generic_interface, providing the API for:
  *     - Initializing and uninitializing the driver
  *     - Task control (for starting, stopping and executing Sensor Controller tasks)
  *     - Task data exchange (for producing input data to and consume output data from Sensor Controller
  *       tasks)
  * - \ref module_scif_driver_setup, containing:
  *     - The AUX RAM image (Sensor Controller code and data)
  *     - I/O mapping information
  *     - Task data structure information
  *     - Driver setup data, to be used in the driver initialization
  *     - Project-specific functionality
  * - \ref module_scif_osal, for flexible OS support:
  *     - Interfaces with the selected operating system
  *
  * It is possible to use output from multiple Sensor Controller Studio projects in one application. Only
  * one driver setup may be active at a time, but it is possible to switch between these setups. When
  * using this option, there is one instance of the \ref module_scif_generic_interface and
  * \ref module_scif_osal modules, and multiple instances of the \ref module_scif_driver_setup module.
  * This requires that:
  * - The outputs must be generated using the same version of Sensor Controller Studio
  * - The outputs must use the same operating system
  * - The outputs must use different source code prefixes (inserted into all globals of the
  *   \ref module_scif_driver_setup)
  *
  *
  * \section section_project_info Project Description
  * Samples 4 channels for TX/RX voltage, calculates min and max values of these measures for each
  * channel and raises AlertInterrupt for main application when done.
  * Sampling occurs only when TDD is locked and connected to the configured GPIO pins.
  *
  *
  * \subsection section_io_mapping I/O Mapping
  * Task I/O functions are mapped to the following pins:
  * - System AGC:
  *     - <b>A: Analog sensor output 0</b>: DIO24
  *     - <b>A: Analog sensor output 1</b>: DIO23
  *     - <b>A: Analog sensor output 2</b>: DIO25
  *     - <b>I: TDD lock pin</b>: DIO15
  *     - <b>I: TDD synchronization pin</b>: DIO14
  *     - <b>O: Channel control PINS 0</b>: DIO26
  *     - <b>O: Channel control PINS 1</b>: DIO27
  *     - <b>O: Controls the red LED</b>: DIO6
  *     - <b>O: Controls the green LED</b>: DIO7
  *
  *
  * \section section_task_info Task Description(s)
  * This driver supports the following task(s):
  *
  *
  * \subsection section_task_desc_system_agc System AGC
  * Samples 4 channels for TX/RX voltage, calculates min and max values of these measures for each
  * channel and raises AlertInterrupt for main application when done.
  * Sampling occurs only when TDD is locked and connected to the configured GPIO pins.
  *
  */




/** \addtogroup module_scif_driver_setup Driver Setup
  *
  * \section section_driver_setup_overview Overview
  *
  * This driver setup instance has been generated for:
  * - <b>Project name</b>:     System AGC  CRU CODE
  * - <b>Code prefix</b>:      -
  *
  * The driver setup module contains the generated output from the Sensor Controller Studio project:
  * - Location of task control and scheduling data structures in AUX RAM
  * - The AUX RAM image, and the size the image
  * - Task data structure information (location, size and buffer count)
  * - I/O pin mapping translation table
  * - Task resource initialization and uninitialization functions
  * - Hooks for run-time logging
  *
  * @{
  */
#ifndef SCIF_H
#define SCIF_H

#include <stdint.h>
#include <stdbool.h>
#include "scif_framework.h"
#include "scif_osal_tirtos.h"


/// Target chip name
#define SCIF_TARGET_CHIP_NAME_CC1352P1F3
/// Target chip package
#define SCIF_TARGET_CHIP_PACKAGE_QFN48_7X7_RGZ

/// Number of tasks implemented by this driver
#define SCIF_TASK_COUNT 1

/// System AGC: Task ID
#define SCIF_SYSTEM_AGC_TASK_ID 0


/// System AGC: 
#define SCIF_SYSTEM_AGC_ACC_VALUE_BUFFER_SIZE 32
/// System AGC: 
#define SCIF_SYSTEM_AGC_ADC_SAMPLE_RATE 100000
/// System AGC: The size of the array of the sums of the samples results (for each channel sum of samples from DLRF, ULRF, DLIF, ULIF).
#define SCIF_SYSTEM_AGC_AVERAGE_SIZE 16
/// System AGC: Number of measures on each channel from one sample cycle (one DL/UL period)
#define SCIF_SYSTEM_AGC_BUFFER_SIZE 10
/// System AGC: Number of channels
#define SCIF_SYSTEM_AGC_CHANNELS_NUMBER 4
/// System AGC: 
#define SCIF_SYSTEM_AGC_CHANNEL_COUNT 4
/// System AGC: 
#define SCIF_SYSTEM_AGC_CHANNEL_HOLD_NUM 4
/// System AGC: 15% of results from all samples across cycles for a given channel
#define SCIF_SYSTEM_AGC_MIN_MAX_CHANNELS_SIZE 3
/// System AGC: 20% of results from all samples across cycles for a given channel
#define SCIF_SYSTEM_AGC_MODES_CHANNEL_SIZE 4
/// System AGC: 20% of sample across all cycles and channels
#define SCIF_SYSTEM_AGC_MODES_SIZE 16
/// System AGC: Number of samples from all channels in each sample cycle
#define SCIF_SYSTEM_AGC_MULTI_BUFFER_SIZE 40
/// System AGC: Total number of measures from all channels across all samples cycles
#define SCIF_SYSTEM_AGC_MULTI_RESULT_SIZE 80
/// System AGC: Number of measures for a channel across all sample cycles
#define SCIF_SYSTEM_AGC_RESULTS 20
/// System AGC: Number of sample cycles
#define SCIF_SYSTEM_AGC_SAMPLE_SIZE 2
/// System AGC: 
#define SCIF_SYSTEM_AGC_SAMPLE_SZ 90
/// System AGC: 
#define SCIF_SYSTEM_AGC_TP_CHANNEL_COUNT 4
/// System AGC I/O mapping: Analog sensor output
#define SCIF_SYSTEM_AGC_DIO_ASENSOR_OUTPUT { 24, 23, 25 }
/// System AGC I/O mapping: TDD lock pin
#define SCIF_SYSTEM_AGC_DIO_I_TDD_LOCK 15
/// System AGC I/O mapping: TDD synchronization pin
#define SCIF_SYSTEM_AGC_DIO_I_TDD_SYNCH 14
/// System AGC I/O mapping: Channel control PINS
#define SCIF_SYSTEM_AGC_DIO_OCHANNEL_CONTROL { 26, 27 }
/// System AGC I/O mapping: Controls the red LED
#define SCIF_SYSTEM_AGC_DIO_O_RED_LED 6
/// System AGC I/O mapping: Controls the green LED
#define SCIF_SYSTEM_AGC_DIO_O_GREEN_LED 7


// All shared data structures in AUX RAM need to be packed
#pragma pack(push, 2)


/// System AGC: Task configuration structure
typedef struct {
    uint16_t Dio26;                    ///< 
    uint16_t Dio27;                    ///< 
    uint16_t channelsSwitch;           ///< Channel select - 0: measure all channels, 1 - 4: measure only this channel
    uint16_t pAuxioASensorOutput[3];   ///< I/O mapping: Analog sensor output
    uint16_t pAuxioOChannelControl[2]; ///< I/O mapping: Channel control PINS
    uint16_t tddMode;                  ///< TDD mode - 0: ManualDL, 1: ManualUL, 2: Auto
    uint16_t unitType;                 ///< Type of unit - 0 : CDU, 1: CRU
} SCIF_SYSTEM_AGC_CFG_T;


/// System AGC: Task input data structure
typedef struct {
    uint16_t Period1;          ///< TDD env variable 
    uint16_t canTouchTester;   ///< 
    uint16_t gapStartRx;       ///< 
    uint16_t gapStartTx;       ///< 
    uint16_t gapStopRx;        ///< 
    uint16_t gapStopTx;        ///< 
    uint16_t randomDelayDL[2]; ///< 
    uint16_t randomDelayUL[2]; ///< 
    uint16_t tddLock;          ///< TDD lock status
} SCIF_SYSTEM_AGC_INPUT_T;


/// System AGC: Task output data structure
typedef struct {
    uint16_t IFDetDLMax[4];       ///< 
    uint16_t IFDetDLMin[4];       ///< 
    uint16_t IFDetULMax[4];       ///< 
    uint16_t IFDetULMin[4];       ///< 
    uint16_t RxDetMax[4];         ///< 
    uint16_t RxDetMin[4];         ///< 
    uint16_t TxDetMax[4];         ///< 
    uint16_t TxDetMin[4];         ///< 
    uint16_t adcValue;            ///< 
    uint16_t channelsIdx;         ///< 
    uint16_t cruLock;             ///< 
    uint16_t pAccValueBuffer[32]; ///< 32-bit accumulator value for each ADC channel (L[0], H[0], ..., L[n], H[n]), to be accessed as a uint32_t array in the System CPU application
    uint16_t tester[32];          ///< 
} SCIF_SYSTEM_AGC_OUTPUT_T;


/// System AGC: Task state structure
typedef struct {
    uint16_t IFDetDLMax[4];       ///< 
    uint16_t IFDetDLMin[4];       ///< 
    uint16_t IFDetULMax[4];       ///< 
    uint16_t IFDetULMin[4];       ///< 
    uint16_t TxDetMax[4];         ///< 
    uint16_t TxDetMin[4];         ///< 
    uint16_t alertEnabled;        ///< Is ALERT interrupt generation enabled?
    uint16_t channelHold;         ///< 
    uint16_t channelsIdx;         ///< 
    uint16_t channelsSwitch;      ///< Channel select - 0: measure all channels, 1 - 4: measure only this channel (copied from cfg in Event A)
    uint16_t exit;                ///< Set to exit the ADC data streamer
    uint16_t invalid;             ///< signal that results of current sample cycle should be discarded and not copied to the results arrays.
    uint16_t ledCounter;          ///< Determines which LED will turn on in Auto mode
    uint16_t ledOn;               ///< bool variable to decide weather we light led or ont
    uint16_t loop;                ///< 
    uint16_t pAccValueBuffer[32]; ///< 32-bit accumulator value for each ADC channel (L[0], H[0], ..., L[n], H[n]), for storage while accumulating sample values
    uint16_t samplesCount;        ///< The sample cycles counter
    uint16_t tddMode;             ///< TDD mode - 0: ManualDL, 1: ManualUL, 2: Auto (copied from cfg in Event A)
    uint16_t unitType;            ///< Type of unit - 0 : CDU, 1: CRU  (copied from cfg in Event A)
} SCIF_SYSTEM_AGC_STATE_T;


/// Sensor Controller task data (configuration, input buffer(s), output buffer(s) and internal state)
typedef struct {
    struct {
        SCIF_SYSTEM_AGC_CFG_T cfg;
        SCIF_SYSTEM_AGC_INPUT_T input;
        SCIF_SYSTEM_AGC_OUTPUT_T output;
        SCIF_SYSTEM_AGC_STATE_T state;
    } systemAgc;
} SCIF_TASK_DATA_T;

/// Sensor Controller task generic control (located in AUX RAM)
#define scifTaskData    (*((volatile SCIF_TASK_DATA_T*) 0x400E015C))


// Initialized internal driver data, to be used in the call to \ref scifInit()
extern const SCIF_DATA_T scifDriverSetup;


// Restore previous struct packing setting
#pragma pack(pop)


// AUX I/O re-initialization functions
void scifReinitTaskIo(uint32_t bvTaskIds);


// No task-specific API available


#endif
//@}


// Generated by LAPTOP-V1AGPT0H at 2022-12-04 15:20:27.836
