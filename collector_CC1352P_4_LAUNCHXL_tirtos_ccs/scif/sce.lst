               .deffile adi_defs__1.asm
               .deffile ddi_defs__1.asm
               .deffile reg_defs__1.asm
               .deffile sce_defs__1.asm

               ; Number of supported tasks
               .define TASK_COUNT      1

               ; Sensor Controller clock frequency in active mode
               .define ACTIVE_MODE_SCE_CLK_FREQ_MHZ    24

               ; Resource-specified definitions, if any
               ; (None)


               .segment begin "Framework"


               VectorTable:
                                       ; SW 0
0000 ---- 140e                         jsr         PowerUp
0001 ---- 0417                         jmp         TaskCtrlReqVector
                                       ; SW 1
0002 ---- 140e                         jsr         PowerUp
0003 ---- 0440                         jmp         EventManTrigVector
                                       ; PROG 0
0004 ---- 140e                         jsr         PowerUp
0005 ---- 044a                         jmp         AonRtcCh2Vector
                                       ; PROG 1
0006 ---- 140e                         jsr         PowerUp
0007 ---- 0467                         jmp         Event0Vector
                                       ; PROG 2
0008 ---- 140e                         jsr         PowerUp
0009 ---- 0470                         jmp         Event1Vector
                                       ; PROG 3
000a ---- 140e                         jsr         PowerUp
000b ---- 0479                         jmp         Event2Vector
                                       ; SW 2
000c ---- 140e                         jsr         PowerUp
000d ---- 0482                         jmp         TaskAlertAckVector




               PowerUp:
                                       ; Make sure that the last operation mode request has taken effect
000e ---- 8953                         in          R0, [#IOP_SYSIF_OPMODEREQ]
000f ---- 9954 /waitForOpmodeSync:     in          R1, [#IOP_SYSIF_OPMODEACK]
0010 ---- 8d29                         cmp         R0, R1
0011 ---- befd                         bneq        /waitForOpmodeSync

                                       ; Deassert the power-down request
0012 ---- 4553                         iobclr      #IOB_SYSIF_OPMODE_PD, [#IOP_SYSIF_OPMODEREQ]

                                       ; Wait for it to take effect
0013 ---- 2554 /waitForOpmodeAck:      iobtst      #IOB_SYSIF_OPMODE_PD, [#IOP_SYSIF_OPMODEACK]
0014 ---- aefe                         biob1       /waitForOpmodeAck

                                       ; Prevent wake-up events from propagating to the AON domain
0015 ---- 445c                         iobclr      #0, [#IOP_SYSIF_WUGATE]

               FwEmptyFunc:            ; Done
0016 ---- adb7                         rts




               TaskCtrlReqVector:
                                       ; Clear wake-up event
0017 ---- 745b                         iobset      #IOB_SYSIF_WUFLAGS_SW_WU0, [#IOP_SYSIF_WUFLAGSCLR]
0018 ---- 545b                         iobclr      #IOB_SYSIF_WUFLAGS_SW_WU0, [#IOP_SYSIF_WUFLAGSCLR]

                                       ; For each task ...
0019 ---- 7000                         ld          R7, #0
               /loop:
                                           ; Save the task ID
001a ---- 7cac                             st          R7, [#fwCtrlInt/taskId]

                                           ; Handle initialize request, if any
001b ---- 68b5                             ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
001c ---- 00a7                             ld          R0, #pFwTaskInitializeFuncTable
001d ---- 1439                             jsr         /handleReq

                                           ; Handle execute request, if any
001e ---- 68b6                             ld          R6, [#fwCtrlExt/bvTaskExecuteReq]
001f ---- 00a8                             ld          R0, #pFwTaskExecuteFuncTable
0020 ---- 1439                             jsr         /handleReq

                                           ; Handle terminate request, if any
0021 ---- 68b7                             ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0022 ---- 00a9                             ld          R0, #pFwTaskTerminateFuncTable
0023 ---- 1439                             jsr         /handleReq

                                           ; Move on to the next task
0024 ---- 78ac                             ld          R7, [#fwCtrlInt/taskId]
0025 ---- f801                             add         R7, #1

0026 ---- fa01                         cmp         R7, #TASK_COUNT
0027 ---- bef2                         bneq        /loop

                                       ; Update which tasks are ...
0028 ---- 78b3                         ld          R7, [#fwCtrlExt/bvActiveTasks]
                                       ; ... currently active ...
0029 ---- 68b5                         ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
002a ---- fd0e                         or          R7, R6
                                       ; ... and inactive ...
002b ---- 68b7                         ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
002c ---- ed92                         inv         R6
002d ---- fd06                         and         R7, R6
002e ---- 7cb3                         st          R7, [#fwCtrlExt/bvActiveTasks]

                                       ; Has the run-time logging application requested locked struct access?
002f ---- 78b2                         ld          R7, [#fwCtrlInt/rtlStructLockReq]
0030 ---- fa01                         cmp         R7, #1
0031 ---- be05                         bneq        /noRtlStructWriteReq

                                           ; Signalize that we're ready
0032 ---- 7002                             ld          R7, #2
0033 ---- 7cb2                             st          R7, [#fwCtrlInt/rtlStructLockReq]

               /waitRtlStructWriteLoop:    ; Wait until the run-time logging application is done
0034 ---- 78b2                             ld          R7, [#fwCtrlInt/rtlStructLockReq]
0035 ---- fa00                             cmp         R7, #0
0036 ---- befd                             bneq        /waitRtlStructWriteLoop
               /noRtlStructWriteReq:
                                       ; We're READY for another request
0037 ---- 6440                         iobset      #IOB_EVCTL_SWEV_READY, [#IOP_EVCTL_SWEVSET]

                                       ; Generate an ALERT interrupt (if requested) and return to sleep
0038 ---- 0487                         jmp         PowerDownSequence;

               /handleReq:
                                       ; Restore the task ID, and load the function pointer (here to avoid pipeline hazard)
0039 ---- 78ac                         ld          R7, [#fwCtrlInt/taskId]
003a ---- 8f1f                         ld          R0, [R7+R0]

                                       ; Skip this request?
003b ---- ed8f                         lsr         R6, R7
003c ---- ec01                         tst         R6, #0x0001
003d ---- be01                         bnz         /noSkip
003e ---- adb7                             rts
               /noSkip:
                                       ; Make the call by jump, with return (rts) in the "called" function
003f ---- 8db7                         jmp         R0




               EventManTrigVector:
                                       ; Clear wake-up event
0040 ---- 755b                         iobset      #IOB_SYSIF_WUFLAGS_SW_WU1, [#IOP_SYSIF_WUFLAGSCLR]
0041 ---- 555b                         iobclr      #IOB_SYSIF_WUFLAGS_SW_WU1, [#IOP_SYSIF_WUFLAGSCLR]

                                       ; Reconfigure the programmable wake-up, and trigger it
0042 ---- 78b1                         ld          R7, [#fwCtrlInt/progwucfgManTrigReg]
0043 ---- 60bf                         ld          R6, #(BV_SYSIF_PROGWUCFG_POL | SYSIF_PROGWUCFG_SRC_NO_EVENT)
0044 ---- ef27                         out         R6, [R7]
0045 ---- e240                         or          R6, #BV_SYSIF_PROGWUCFG_EN
0046 ---- ef27                         out         R6, [R7]

                                       ; Indicate completion
0047 ---- 7000                         ld          R7, #0x0000
0048 ---- 7cb1                         st          R7, [#fwCtrlInt/progwucfgManTrigReg]

                                       ; Generate an ALERT interrupt (if requested) and return to sleep
0049 ---- 0487                         jmp         PowerDownSequence;




               AonRtcCh2Vector:
                                       ; Start clearing the RTC event
004a ---- 6477                         iobset      #0, [#IOP_SYSIF_RTCEVCLR]

                                       ; For each task (R0 is the current task ID) ...
004b ---- 0000                         ld          R0, #0
               /loop:
                                           ; ... that is active ...
004c ---- 18b3                             ld          R1, [#fwCtrlExt/bvActiveTasks]
004d ---- 9d88                             lsr         R1, R0
004e ---- 9c01                             tst         R1, #0x0001
004f ---- b60e                             bz          /skip

                                               ; Fetch number of RTC intervals until next execution
0050 ---- 10a6                                 ld          R1, #pFwTaskExecuteScheduleTable
0051 ---- af19                                 ld          R2, [R1+R0]

                                               ; If not already 0, decrement and store. If then 0 ...
0052 ---- aa00                                 cmp         R2, #0
0053 ---- b60a                                 beq         /skip
0054 ---- a8ff                                 add         R2, #-1
0055 ---- af39                                 st          R2, [R1+R0]
0056 ---- be07                                 bnz         /skip

                                                   ; ... execute the task
0057 ---- 0cac                                     st          R0, [#fwCtrlInt/taskId]
0058 8600 88a8                                     add         R0, #pFwTaskExecuteFuncTable
005a ---- 8f08                                     ld          R0, [R0]
                                                   ; Insert NOP to avoid pipeline hazard
005b ---- fd47                                     nop
005c ---- 9db7                                     jsr         R0
005d ---- 08ac                                     ld          R0, [#fwCtrlInt/taskId]
               /skip:
                                           ; Move on to the next task
005e ---- 8801                             add         R0, #1

005f ---- 8a01                         cmp         R0, #TASK_COUNT
0060 ---- beeb                         bneq        /loop

                                       ; Wait for the RTC CH2 event clearing to finish
0061 ---- 254f /waitOnRtcEvClr:        iobtst      #IOB_EVCTL_EVSTAT2L_AON_RTC_CH2, [#IOP_EVCTL_EVSTAT2L]
0062 ---- aefe                         biob1       /waitOnRtcEvClr

                                       ; Clear event edge detector
0063 ---- 645b                         iobset      #IOB_SYSIF_WUFLAGS_PROG_WU0, [#IOP_SYSIF_WUFLAGSCLR]
0064 ---- 445b                         iobclr      #IOB_SYSIF_WUFLAGS_PROG_WU0, [#IOP_SYSIF_WUFLAGSCLR]

                                       ; End clearing the RTC event
0065 ---- 4477                         iobclr      #0, [#IOP_SYSIF_RTCEVCLR]

                                       ; Generate an ALERT interrupt (if requested) and return to sleep
0066 ---- 0487                         jmp         PowerDownSequence;




               Event0Vector:
                                       ; Disable and clear wake-up event
0067 ---- 5656                         iobclr      #IOB_SYSIF_PROGWUCFG_EN,        [#IOP_SYSIF_PROGWU1CFG] ; Disable source
0068 ---- 655b                         iobset      #IOB_SYSIF_WUFLAGS_PROG_WU1,    [#IOP_SYSIF_WUFLAGSCLR] ; Clear edge detector
0069 ---- 455b                         iobclr      #IOB_SYSIF_WUFLAGS_PROG_WU1,    [#IOP_SYSIF_WUFLAGSCLR]

                                       ; Set the task ID and active event index
006a ---- 0000                         ld          R0, #0
006b ---- 0cac                         st          R0, [#fwCtrlInt/taskId]
006c ---- 0001                         ld          R0, #(1 << 0)
006d ---- 0cad                         st          R0, [#fwCtrlInt/bvActiveEvent]

                                       ; Jump to the event task code
006e ---- 1657                         jsr         systemAgc/event0

                                       ; Generate an ALERT interrupt (if requested) and return to sleep
006f ---- 0487                         jmp         PowerDownSequence;




               Event1Vector:
                                       ; Disable and clear wake-up event
0070 ---- 5657                         iobclr      #IOB_SYSIF_PROGWUCFG_EN,        [#IOP_SYSIF_PROGWU2CFG] ; Disable source
0071 ---- 665b                         iobset      #IOB_SYSIF_WUFLAGS_PROG_WU2,    [#IOP_SYSIF_WUFLAGSCLR] ; Clear edge detector
0072 ---- 465b                         iobclr      #IOB_SYSIF_WUFLAGS_PROG_WU2,    [#IOP_SYSIF_WUFLAGSCLR]

                                       ; Set the task ID and active event index
0073 ---- 0000                         ld          R0, #0
0074 ---- 0cac                         st          R0, [#fwCtrlInt/taskId]
0075 ---- 0002                         ld          R0, #(1 << 1)
0076 ---- 0cad                         st          R0, [#fwCtrlInt/bvActiveEvent]

                                       ; Jump to the event task code
0077 ---- 166e                         jsr         systemAgc/event1

                                       ; Generate an ALERT interrupt (if requested) and return to sleep
0078 ---- 0487                         jmp         PowerDownSequence;




               Event2Vector:
                                       ; Disable and clear wake-up event
0079 ---- 5658                         iobclr      #IOB_SYSIF_PROGWUCFG_EN,        [#IOP_SYSIF_PROGWU3CFG] ; Disable source
007a ---- 675b                         iobset      #IOB_SYSIF_WUFLAGS_PROG_WU3,    [#IOP_SYSIF_WUFLAGSCLR] ; Clear edge detector
007b ---- 475b                         iobclr      #IOB_SYSIF_WUFLAGS_PROG_WU3,    [#IOP_SYSIF_WUFLAGSCLR]

                                       ; Set the task ID and active event index
007c ---- 0000                         ld          R0, #0
007d ---- 0cac                         st          R0, [#fwCtrlInt/taskId]
007e ---- 0004                         ld          R0, #(1 << 2)
007f ---- 0cad                         st          R0, [#fwCtrlInt/bvActiveEvent]

                                       ; Jump to the event task code
0080 ---- 17b3                         jsr         systemAgc/event2

                                       ; Generate an ALERT interrupt (if requested) and return to sleep
0081 ---- 0487                         jmp         PowerDownSequence;




               TaskAlertAckVector:
                                       ; Clear wake-up event
0082 ---- 765b                         iobset      #IOB_SYSIF_WUFLAGS_SW_WU2, [#IOP_SYSIF_WUFLAGSCLR]
0083 ---- 565b                         iobclr      #IOB_SYSIF_WUFLAGS_SW_WU2, [#IOP_SYSIF_WUFLAGSCLR]

                                       ; Re-enable generation of ALERT interrupts
0084 86ff 03ff                         ld          R0, #0xFFFF
0086 ---- 0caf                         st          R0, [#fwCtrlInt/alertGenMask]

                                       ; Generate an ALERT interrupt (if requested) and return to sleep
                                       ; -> Fall through




               PowerDownSequence:
                                       ; Let wake-up events propagate to the AON domain
0087 ---- 645c                         iobset      #0, [#IOP_SYSIF_WUGATE]

                                       ; Do we have any ALERT-generating flags pending?
0088 ---- 78ae                         ld          R7, [#fwCtrlInt/bvTaskIoAlert]

                                       ; Skip if the last I/O ALERT interrupt has not been acknowledged
0089 ---- 68af                         ld          R6, [#fwCtrlInt/alertGenMask]
008a ---- ed37                         tst         R6, R7
008b ---- b605                         bz          /skipAlertGen

                                           ; Transfer I/O flags from internal to external
008c ---- 0000                             ld          R0, #0
008d ---- 0cae                             st          R0, [#fwCtrlInt/bvTaskIoAlert]
008e ---- 7cb4                             st          R7, [#fwCtrlExt/bvTaskIoAlert]

                                           ; Generate the ALERT interrupt, and clear the generation mask
008f ---- 6540                             iobset      #IOB_EVCTL_SWEV_ALERT, [#IOP_EVCTL_SWEVSET]
0090 ---- 0caf                             st          R0, [#fwCtrlInt/alertGenMask]
               /skipAlertGen:
                                       ; Set initial power mode for next executed vector
                                       ; -> Only at initialization

                                       ; If there are no unacknowledged ALERTs and no vectors pending ...
0091 ---- 78af                         ld          R7, [#fwCtrlInt/alertGenMask]
0092 ---- 68b0                         ld          R6, [#fwCtrlInt/alertCanPdAuxMask]
0093 ---- fd0e                         or          R7, R6
0094 ---- f801                         add         R7, #1 ; 0xFFFF -> 0x0000
0095 ---- e95a                         in          R6, [#IOP_SYSIF_WUFLAGS]
0096 ---- fd0e                         or          R7, R6
0097 ---- be01                         bnz         /noPowerDown

                                           ; Assert the power-down request
0098 ---- 6553                             iobset      #IOB_SYSIF_OPMODE_PD, [#IOP_SYSIF_OPMODEREQ]
               /noPowerDown:
                                       ; Sleep until the next event
0099 ---- bdb7 sleepInstr:             sleep




               PwrRequestAndWaitForActiveMode:
                                       ; Update Reference DAC clock divider before entering active mode
009a ---- 700b                         ld          R7, #((ACTIVE_MODE_SCE_CLK_FREQ_MHZ / 2) - 1)
009b ---- fb96                         out         R7, [#IOP_ANAIF_DACSMPLCFG0]

                                       ; Deassert the low-power request
009c ---- 4453                         iobclr      #IOB_SYSIF_OPMODE_LP, [#IOP_SYSIF_OPMODEREQ]

                                       ; Wait for it to take effect
009d ---- 2454 /waitForOpmodeAck:      iobtst      #IOB_SYSIF_OPMODE_LP, [#IOP_SYSIF_OPMODEACK]
009e ---- aefe                         biob1       /waitForOpmodeAck

                                       ; Done
009f ---- adb7                         rts




               PwrRequestAndWaitForLowPowerMode:
                                       ; Assert the low-power request
00a0 ---- 6453                         iobset      #IOB_SYSIF_OPMODE_LP, [#IOP_SYSIF_OPMODEREQ]

                                       ; Wait for it to take effect
00a1 ---- 2454 /waitForOpmodeAck:      iobtst      #IOB_SYSIF_OPMODE_LP, [#IOP_SYSIF_OPMODEACK]
00a2 ---- a6fe                         biob0       /waitForOpmodeAck

                                       ; Update Reference DAC clock divider after leaving active mode
00a3 ---- 7000                         ld          R7, #(1 - 1)
00a4 ---- fb96                         out         R7, [#IOP_ANAIF_DACSMPLCFG0]

                                       ; Done
00a5 ---- adb7                         rts




               ; RTC ticks until next execution, one word for each task
               pFwTaskExecuteScheduleTable:
00a6 ---- 0000                         dw          #0

               ; Task code function pointers for each task code block, one word for each task
               pFwTaskInitializeFuncTable:
00a7 ---- 023f                         dw          #systemAgc/initialize
               pFwTaskExecuteFuncTable:
00a8 ---- 0256                         dw          #systemAgc/execute
               pFwTaskTerminateFuncTable:
00a9 ---- 0508                         dw          #systemAgc/terminate

               ; Run-time logging log requests and masks, one bit for each struct, one word for each task
               pRtlTaskLogReqTable:
00aa ---- 0000                         dw          #0x0000
               pRtlTaskLogMaskTable:
00ab ---- 0000                         dw          #0x0000


               ; Internal control data
               fwCtrlInt:
00ac ---- 0000 /taskId:                dw          #0      ; ID of the currently running task
00ad ---- 0000 /bvActiveEvent:         dw          #0      ; Bit-vector indicating index of the currently active event trigger
00ae ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
00af ---- ffff /alertGenMask:          dw          #0xFFFF ; Can generate an ALERT interrupt now? (0xFFFF = yes, 0x0000 = no)
00b0 ---- 0000 /alertCanPdAuxMask:     dw          #0x0000 ; Can power down AUX domain after ALERT interrupt generation? (0xFFFF = yes, 0x0000 = no)
00b1 ---- 0000 /progwucfgManTrigReg:   dw          #0x0000 ; Address of PROGWUnCFG register to be triggered manually by EventManTriggerVector
00b2 ---- 0000 /rtlStructLockReq:      dw          #0x0000 ; Run-time logging struct lock request (0=idle -> 1=requested -> 2=ready -> access -> 0=idle)

               ; External control data, shared with the driver
               fwCtrlExt:
00b3 ---- 0000 /bvActiveTasks:         dw          #0x0000 ; Indicates which tasks are currently active
00b4 ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
00b5 ---- 0000 /bvTaskInitializeReq:   dw          #0x0000 ; Requests tasks to start
00b6 ---- 0000 /bvTaskExecuteReq:      dw          #0x0000 ; Requests tasks to execute once immediately
00b7 ---- 0000 /bvTaskTerminateReq:    dw          #0x0000 ; Requests tasks to stop


               .segment end "Framework"


               fwTaskDataStructures:
               .segment begin "Task: System AGC"
               systemAgc/cfg:
               systemAgc/cfg/channelsNum:
00b8 ---- 0004                         dw          #4
               systemAgc/cfg/channelsSwitch:
00b9 ---- 0000                         dw          #0
               systemAgc/cfg/measuresCount:
00ba ---- 0014                         dw          #20
               systemAgc/cfg/modesChannel:
00bb ---- 000c                         dw          #12
               systemAgc/cfg/pAuxioASensorOutput:
00bc ---- 0019                         dw          #25
00bd ---- 001a                         dw          #26
00be ---- 0018                         dw          #24
               systemAgc/cfg/pAuxioOChannelControl:
00bf ---- 0017                         dw          #23
00c0 ---- 0016                         dw          #22
               systemAgc/cfg/samplesCount:
00c1 ---- 0003                         dw          #3
               systemAgc/cfg/tddMode:
00c2 ---- 0000                         dw          #0
               systemAgc/cfg/unitType:
00c3 ---- 0000                         dw          #0
               systemAgc/input:
               systemAgc/input/randomDelayRX:
00c4 ---- 0000                         dw          #0
00c5 ---- 0000                         dw          #0
00c6 ---- 0000                         dw          #0
               systemAgc/input/randomDelayTX:
00c7 ---- 0000                         dw          #0
00c8 ---- 0000                         dw          #0
00c9 ---- 0000                         dw          #0
               systemAgc/output:
               systemAgc/output/channelsMaxIFRX:
00ca ---- 0000                         dw          #0
00cb ---- 0000                         dw          #0
00cc ---- 0000                         dw          #0
00cd ---- 0000                         dw          #0
               systemAgc/output/channelsMaxIFTX:
00ce ---- 0000                         dw          #0
00cf ---- 0000                         dw          #0
00d0 ---- 0000                         dw          #0
00d1 ---- 0000                         dw          #0
               systemAgc/output/channelsMaxRFRX:
00d2 ---- 0000                         dw          #0
00d3 ---- 0000                         dw          #0
00d4 ---- 0000                         dw          #0
00d5 ---- 0000                         dw          #0
               systemAgc/output/channelsMaxRFTX:
00d6 ---- 0000                         dw          #0
00d7 ---- 0000                         dw          #0
00d8 ---- 0000                         dw          #0
00d9 ---- 0000                         dw          #0
               systemAgc/output/maxModesIFRX:
00da ---- 0000                         dw          #0
00db ---- 0000                         dw          #0
00dc ---- 0000                         dw          #0
00dd ---- 0000                         dw          #0
00de ---- 0000                         dw          #0
00df ---- 0000                         dw          #0
00e0 ---- 0000                         dw          #0
00e1 ---- 0000                         dw          #0
00e2 ---- 0000                         dw          #0
00e3 ---- 0000                         dw          #0
00e4 ---- 0000                         dw          #0
00e5 ---- 0000                         dw          #0
00e6 ---- 0000                         dw          #0
00e7 ---- 0000                         dw          #0
00e8 ---- 0000                         dw          #0
00e9 ---- 0000                         dw          #0
00ea ---- 0000                         dw          #0
00eb ---- 0000                         dw          #0
00ec ---- 0000                         dw          #0
00ed ---- 0000                         dw          #0
00ee ---- 0000                         dw          #0
00ef ---- 0000                         dw          #0
00f0 ---- 0000                         dw          #0
00f1 ---- 0000                         dw          #0
00f2 ---- 0000                         dw          #0
00f3 ---- 0000                         dw          #0
00f4 ---- 0000                         dw          #0
00f5 ---- 0000                         dw          #0
00f6 ---- 0000                         dw          #0
00f7 ---- 0000                         dw          #0
00f8 ---- 0000                         dw          #0
00f9 ---- 0000                         dw          #0
00fa ---- 0000                         dw          #0
00fb ---- 0000                         dw          #0
00fc ---- 0000                         dw          #0
00fd ---- 0000                         dw          #0
00fe ---- 0000                         dw          #0
00ff ---- 0000                         dw          #0
0100 ---- 0000                         dw          #0
0101 ---- 0000                         dw          #0
0102 ---- 0000                         dw          #0
0103 ---- 0000                         dw          #0
0104 ---- 0000                         dw          #0
0105 ---- 0000                         dw          #0
0106 ---- 0000                         dw          #0
0107 ---- 0000                         dw          #0
0108 ---- 0000                         dw          #0
0109 ---- 0000                         dw          #0
               systemAgc/output/maxModesIFTX:
010a ---- 0000                         dw          #0
010b ---- 0000                         dw          #0
010c ---- 0000                         dw          #0
010d ---- 0000                         dw          #0
010e ---- 0000                         dw          #0
010f ---- 0000                         dw          #0
0110 ---- 0000                         dw          #0
0111 ---- 0000                         dw          #0
0112 ---- 0000                         dw          #0
0113 ---- 0000                         dw          #0
0114 ---- 0000                         dw          #0
0115 ---- 0000                         dw          #0
0116 ---- 0000                         dw          #0
0117 ---- 0000                         dw          #0
0118 ---- 0000                         dw          #0
0119 ---- 0000                         dw          #0
011a ---- 0000                         dw          #0
011b ---- 0000                         dw          #0
011c ---- 0000                         dw          #0
011d ---- 0000                         dw          #0
011e ---- 0000                         dw          #0
011f ---- 0000                         dw          #0
0120 ---- 0000                         dw          #0
0121 ---- 0000                         dw          #0
0122 ---- 0000                         dw          #0
0123 ---- 0000                         dw          #0
0124 ---- 0000                         dw          #0
0125 ---- 0000                         dw          #0
0126 ---- 0000                         dw          #0
0127 ---- 0000                         dw          #0
0128 ---- 0000                         dw          #0
0129 ---- 0000                         dw          #0
012a ---- 0000                         dw          #0
012b ---- 0000                         dw          #0
012c ---- 0000                         dw          #0
012d ---- 0000                         dw          #0
012e ---- 0000                         dw          #0
012f ---- 0000                         dw          #0
0130 ---- 0000                         dw          #0
0131 ---- 0000                         dw          #0
0132 ---- 0000                         dw          #0
0133 ---- 0000                         dw          #0
0134 ---- 0000                         dw          #0
0135 ---- 0000                         dw          #0
0136 ---- 0000                         dw          #0
0137 ---- 0000                         dw          #0
0138 ---- 0000                         dw          #0
0139 ---- 0000                         dw          #0
               systemAgc/output/maxModesRFRX:
013a ---- 0000                         dw          #0
013b ---- 0000                         dw          #0
013c ---- 0000                         dw          #0
013d ---- 0000                         dw          #0
013e ---- 0000                         dw          #0
013f ---- 0000                         dw          #0
0140 ---- 0000                         dw          #0
0141 ---- 0000                         dw          #0
0142 ---- 0000                         dw          #0
0143 ---- 0000                         dw          #0
0144 ---- 0000                         dw          #0
0145 ---- 0000                         dw          #0
0146 ---- 0000                         dw          #0
0147 ---- 0000                         dw          #0
0148 ---- 0000                         dw          #0
0149 ---- 0000                         dw          #0
014a ---- 0000                         dw          #0
014b ---- 0000                         dw          #0
014c ---- 0000                         dw          #0
014d ---- 0000                         dw          #0
014e ---- 0000                         dw          #0
014f ---- 0000                         dw          #0
0150 ---- 0000                         dw          #0
0151 ---- 0000                         dw          #0
0152 ---- 0000                         dw          #0
0153 ---- 0000                         dw          #0
0154 ---- 0000                         dw          #0
0155 ---- 0000                         dw          #0
0156 ---- 0000                         dw          #0
0157 ---- 0000                         dw          #0
0158 ---- 0000                         dw          #0
0159 ---- 0000                         dw          #0
015a ---- 0000                         dw          #0
015b ---- 0000                         dw          #0
015c ---- 0000                         dw          #0
015d ---- 0000                         dw          #0
015e ---- 0000                         dw          #0
015f ---- 0000                         dw          #0
0160 ---- 0000                         dw          #0
0161 ---- 0000                         dw          #0
0162 ---- 0000                         dw          #0
0163 ---- 0000                         dw          #0
0164 ---- 0000                         dw          #0
0165 ---- 0000                         dw          #0
0166 ---- 0000                         dw          #0
0167 ---- 0000                         dw          #0
0168 ---- 0000                         dw          #0
0169 ---- 0000                         dw          #0
               systemAgc/output/maxModesRFTX:
016a ---- 0000                         dw          #0
016b ---- 0000                         dw          #0
016c ---- 0000                         dw          #0
016d ---- 0000                         dw          #0
016e ---- 0000                         dw          #0
016f ---- 0000                         dw          #0
0170 ---- 0000                         dw          #0
0171 ---- 0000                         dw          #0
0172 ---- 0000                         dw          #0
0173 ---- 0000                         dw          #0
0174 ---- 0000                         dw          #0
0175 ---- 0000                         dw          #0
0176 ---- 0000                         dw          #0
0177 ---- 0000                         dw          #0
0178 ---- 0000                         dw          #0
0179 ---- 0000                         dw          #0
017a ---- 0000                         dw          #0
017b ---- 0000                         dw          #0
017c ---- 0000                         dw          #0
017d ---- 0000                         dw          #0
017e ---- 0000                         dw          #0
017f ---- 0000                         dw          #0
0180 ---- 0000                         dw          #0
0181 ---- 0000                         dw          #0
0182 ---- 0000                         dw          #0
0183 ---- 0000                         dw          #0
0184 ---- 0000                         dw          #0
0185 ---- 0000                         dw          #0
0186 ---- 0000                         dw          #0
0187 ---- 0000                         dw          #0
0188 ---- 0000                         dw          #0
0189 ---- 0000                         dw          #0
018a ---- 0000                         dw          #0
018b ---- 0000                         dw          #0
018c ---- 0000                         dw          #0
018d ---- 0000                         dw          #0
018e ---- 0000                         dw          #0
018f ---- 0000                         dw          #0
0190 ---- 0000                         dw          #0
0191 ---- 0000                         dw          #0
0192 ---- 0000                         dw          #0
0193 ---- 0000                         dw          #0
0194 ---- 0000                         dw          #0
0195 ---- 0000                         dw          #0
0196 ---- 0000                         dw          #0
0197 ---- 0000                         dw          #0
0198 ---- 0000                         dw          #0
0199 ---- 0000                         dw          #0
               systemAgc/output/pSamplesMultiChannelIF:
019a ---- 0000                         dw          #0
019b ---- 0000                         dw          #0
019c ---- 0000                         dw          #0
019d ---- 0000                         dw          #0
019e ---- 0000                         dw          #0
019f ---- 0000                         dw          #0
01a0 ---- 0000                         dw          #0
01a1 ---- 0000                         dw          #0
01a2 ---- 0000                         dw          #0
01a3 ---- 0000                         dw          #0
01a4 ---- 0000                         dw          #0
01a5 ---- 0000                         dw          #0
01a6 ---- 0000                         dw          #0
01a7 ---- 0000                         dw          #0
01a8 ---- 0000                         dw          #0
01a9 ---- 0000                         dw          #0
01aa ---- 0000                         dw          #0
01ab ---- 0000                         dw          #0
01ac ---- 0000                         dw          #0
01ad ---- 0000                         dw          #0
01ae ---- 0000                         dw          #0
01af ---- 0000                         dw          #0
01b0 ---- 0000                         dw          #0
01b1 ---- 0000                         dw          #0
01b2 ---- 0000                         dw          #0
01b3 ---- 0000                         dw          #0
01b4 ---- 0000                         dw          #0
01b5 ---- 0000                         dw          #0
01b6 ---- 0000                         dw          #0
01b7 ---- 0000                         dw          #0
01b8 ---- 0000                         dw          #0
01b9 ---- 0000                         dw          #0
01ba ---- 0000                         dw          #0
01bb ---- 0000                         dw          #0
01bc ---- 0000                         dw          #0
01bd ---- 0000                         dw          #0
01be ---- 0000                         dw          #0
01bf ---- 0000                         dw          #0
01c0 ---- 0000                         dw          #0
01c1 ---- 0000                         dw          #0
01c2 ---- 0000                         dw          #0
01c3 ---- 0000                         dw          #0
01c4 ---- 0000                         dw          #0
01c5 ---- 0000                         dw          #0
01c6 ---- 0000                         dw          #0
01c7 ---- 0000                         dw          #0
01c8 ---- 0000                         dw          #0
01c9 ---- 0000                         dw          #0
01ca ---- 0000                         dw          #0
01cb ---- 0000                         dw          #0
01cc ---- 0000                         dw          #0
01cd ---- 0000                         dw          #0
01ce ---- 0000                         dw          #0
01cf ---- 0000                         dw          #0
01d0 ---- 0000                         dw          #0
01d1 ---- 0000                         dw          #0
01d2 ---- 0000                         dw          #0
01d3 ---- 0000                         dw          #0
01d4 ---- 0000                         dw          #0
01d5 ---- 0000                         dw          #0
01d6 ---- 0000                         dw          #0
01d7 ---- 0000                         dw          #0
01d8 ---- 0000                         dw          #0
01d9 ---- 0000                         dw          #0
01da ---- 0000                         dw          #0
01db ---- 0000                         dw          #0
01dc ---- 0000                         dw          #0
01dd ---- 0000                         dw          #0
01de ---- 0000                         dw          #0
01df ---- 0000                         dw          #0
01e0 ---- 0000                         dw          #0
01e1 ---- 0000                         dw          #0
01e2 ---- 0000                         dw          #0
01e3 ---- 0000                         dw          #0
01e4 ---- 0000                         dw          #0
01e5 ---- 0000                         dw          #0
01e6 ---- 0000                         dw          #0
01e7 ---- 0000                         dw          #0
01e8 ---- 0000                         dw          #0
01e9 ---- 0000                         dw          #0
               systemAgc/output/pSamplesMultiChannelRF:
01ea ---- 0000                         dw          #0
01eb ---- 0000                         dw          #0
01ec ---- 0000                         dw          #0
01ed ---- 0000                         dw          #0
01ee ---- 0000                         dw          #0
01ef ---- 0000                         dw          #0
01f0 ---- 0000                         dw          #0
01f1 ---- 0000                         dw          #0
01f2 ---- 0000                         dw          #0
01f3 ---- 0000                         dw          #0
01f4 ---- 0000                         dw          #0
01f5 ---- 0000                         dw          #0
01f6 ---- 0000                         dw          #0
01f7 ---- 0000                         dw          #0
01f8 ---- 0000                         dw          #0
01f9 ---- 0000                         dw          #0
01fa ---- 0000                         dw          #0
01fb ---- 0000                         dw          #0
01fc ---- 0000                         dw          #0
01fd ---- 0000                         dw          #0
01fe ---- 0000                         dw          #0
01ff ---- 0000                         dw          #0
0200 ---- 0000                         dw          #0
0201 ---- 0000                         dw          #0
0202 ---- 0000                         dw          #0
0203 ---- 0000                         dw          #0
0204 ---- 0000                         dw          #0
0205 ---- 0000                         dw          #0
0206 ---- 0000                         dw          #0
0207 ---- 0000                         dw          #0
0208 ---- 0000                         dw          #0
0209 ---- 0000                         dw          #0
020a ---- 0000                         dw          #0
020b ---- 0000                         dw          #0
020c ---- 0000                         dw          #0
020d ---- 0000                         dw          #0
020e ---- 0000                         dw          #0
020f ---- 0000                         dw          #0
0210 ---- 0000                         dw          #0
0211 ---- 0000                         dw          #0
0212 ---- 0000                         dw          #0
0213 ---- 0000                         dw          #0
0214 ---- 0000                         dw          #0
0215 ---- 0000                         dw          #0
0216 ---- 0000                         dw          #0
0217 ---- 0000                         dw          #0
0218 ---- 0000                         dw          #0
0219 ---- 0000                         dw          #0
021a ---- 0000                         dw          #0
021b ---- 0000                         dw          #0
021c ---- 0000                         dw          #0
021d ---- 0000                         dw          #0
021e ---- 0000                         dw          #0
021f ---- 0000                         dw          #0
0220 ---- 0000                         dw          #0
0221 ---- 0000                         dw          #0
0222 ---- 0000                         dw          #0
0223 ---- 0000                         dw          #0
0224 ---- 0000                         dw          #0
0225 ---- 0000                         dw          #0
0226 ---- 0000                         dw          #0
0227 ---- 0000                         dw          #0
0228 ---- 0000                         dw          #0
0229 ---- 0000                         dw          #0
022a ---- 0000                         dw          #0
022b ---- 0000                         dw          #0
022c ---- 0000                         dw          #0
022d ---- 0000                         dw          #0
022e ---- 0000                         dw          #0
022f ---- 0000                         dw          #0
0230 ---- 0000                         dw          #0
0231 ---- 0000                         dw          #0
0232 ---- 0000                         dw          #0
0233 ---- 0000                         dw          #0
0234 ---- 0000                         dw          #0
0235 ---- 0000                         dw          #0
0236 ---- 0000                         dw          #0
0237 ---- 0000                         dw          #0
0238 ---- 0000                         dw          #0
0239 ---- 0000                         dw          #0
               systemAgc/state:
               systemAgc/state/alertEnabled:
023a ---- 0001                         dw          #1
               systemAgc/state/exit:
023b ---- 0000                         dw          #0
               systemAgc/state/head:
023c ---- 0000                         dw          #0
               systemAgc/state/tail:
023d ---- 0000                         dw          #0
               systemAgc/state/tddMode:
023e ---- 0000                         dw          #0
               .segment end "Task: System AGC"


               .segment begin "Task: System AGC"
               systemAgc/initialize:
               ;? state.tddMode = cfg.tddMode;
023f ---- 08c2                         ld          R0, [#systemAgc/cfg/tddMode]
0240 ---- 0e3e                         st          R0, [#systemAgc/state/tddMode]
               ;? if(state.tddMode == 2){
0241 ---- 0a3e                         ld          R0, [#systemAgc/state/tddMode]
0242 ---- 8a02                         cmp         R0, #2
0243 ---- be06                         bneq        /id0603
               ;?     evhSetupGpioTrigger(0, AUXIO_I_TDD_LOCK, 0, EVH_GPIO_TRIG_ON_MATCH);
0244 ---- 0083                             ld          R0, #((3 + SYSIF_PROGWUCFG_SRC_AUXIO0) |((0 == 0) << IOB_SYSIF_PROGWUCFG_POL))
0245 ---- 8b56                             out         R0, [#((IOP_SYSIF_PROGWU1CFG + 0) + 0)]
0246 ---- 655b                             iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 0), [#IOP_SYSIF_WUFLAGSCLR]
0247 ---- 455b                             iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 0), [#IOP_SYSIF_WUFLAGSCLR]
0248 ---- 7656                             iobset      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 0) + 0)]
               ;?     //evhSetupTimer0Trigger(0, 100, 2);
               ;? }else {
0249 ---- 0655                         jmp         /id0605
               /id0603:
               ;?     //timer0StartWithTickSrc(TIMER0_TICKSRC_AON_RTC_4KHZ, 1, TIMER0_MODE_PERIODICAL, 4096 / 20, 0);
               ;?     //evhSetupTimer0CustomTrigger(1);
               ;?     evhSetupTimer0Trigger(0, 1, 2);
024a ---- 0001                             ld          R0, #1
024b ---- 8b81                             out         R0, [#IOP_TIMER01_T0TARGET]
024c 8623 0322                             ld          R0, #(((2 << IOB_TIMER01_TXCFG_PRE) | TIMER01_TXCFG_TICK_SRC_AON_RTC_4KHZ) | BV_TIMER01_TXCFG_MODE_TICK)
024e ---- 8b7d                             out         R0, [#IOP_TIMER01_T0CFG]
024f ---- 0036                             ld          R0, #SYSIF_PROGWUCFG_SRC_AUX_TIMER0_EV
0250 ---- 8b56                             out         R0, [#((IOP_SYSIF_PROGWU1CFG + 0) + 0)]
0251 ---- 655b                             iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 0), [#IOP_SYSIF_WUFLAGSCLR]
0252 ---- 455b                             iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 0), [#IOP_SYSIF_WUFLAGSCLR]
0253 ---- 7656                             iobset      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 0) + 0)]
0254 ---- 647f                             iobset      #0, [#IOP_TIMER01_T0CTL]
               ;? }
               /id0605:
               ;? //evhSetupGpioTrigger(0, AUXIO_I_TDD_SYNCH, 1, EVH_GPIO_TRIG_ON_EDGE);
               systemAgc/initializeDone:
0255 ---- adb7                         rts




               systemAgc/execute:
               ;?
               systemAgc/executeDone:
0256 ---- adb7                         rts




               systemAgc/event0:
               ;? state.tddMode = cfg.tddMode;
0257 ---- 08c2                         ld          R0, [#systemAgc/cfg/tddMode]
0258 ---- 0e3e                         st          R0, [#systemAgc/state/tddMode]
               ;? if(state.tddMode == 2){
0259 ---- 0a3e                         ld          R0, [#systemAgc/state/tddMode]
025a ---- 8a02                         cmp         R0, #2
025b ---- be06                         bneq        /id0610
               ;?     evhSetupGpioTrigger(1, AUXIO_I_TDD_SYNCH, 1, EVH_GPIO_TRIG_ON_EDGE); // for tdd lock pin
025c ---- 0004                             ld          R0, #((4 + SYSIF_PROGWUCFG_SRC_AUXIO0) |((1 == 0) << IOB_SYSIF_PROGWUCFG_POL))
025d ---- 8b57                             out         R0, [#((IOP_SYSIF_PROGWU1CFG + 0) + 1)]
025e ---- 665b                             iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 1), [#IOP_SYSIF_WUFLAGSCLR]
025f ---- 7657                             iobset      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 0) + 1)]
0260 ---- 465b                             iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 1), [#IOP_SYSIF_WUFLAGSCLR]
               ;?     //evhSetupTimer0Trigger(0, 100, 2);
               ;? }else{
0261 ---- 066d                         jmp         /id0612
               /id0610:
               ;?     //if(state.tddMode == 0){
               ;?     //    state.tddMode = 1;
               ;?     //}else{
               ;?     //    state.tddMode = 0;
               ;?     //}
               ;?     evhSetupTimer0Trigger(1, 1, 2);
0262 ---- 0001                             ld          R0, #1
0263 ---- 8b81                             out         R0, [#IOP_TIMER01_T0TARGET]
0264 8623 0322                             ld          R0, #(((2 << IOB_TIMER01_TXCFG_PRE) | TIMER01_TXCFG_TICK_SRC_AON_RTC_4KHZ) | BV_TIMER01_TXCFG_MODE_TICK)
0266 ---- 8b7d                             out         R0, [#IOP_TIMER01_T0CFG]
0267 ---- 0036                             ld          R0, #SYSIF_PROGWUCFG_SRC_AUX_TIMER0_EV
0268 ---- 8b57                             out         R0, [#((IOP_SYSIF_PROGWU1CFG + 0) + 1)]
0269 ---- 665b                             iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 1), [#IOP_SYSIF_WUFLAGSCLR]
026a ---- 465b                             iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 1), [#IOP_SYSIF_WUFLAGSCLR]
026b ---- 7657                             iobset      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 0) + 1)]
026c ---- 647f                             iobset      #0, [#IOP_TIMER01_T0CTL]
               ;? }
               /id0612:
               ;? //evhSetupGpioTrigger(1, AUXIO_I_TDD_SYNCH, 1, EVH_GPIO_TRIG_ON_MATCH);
               systemAgc/event0Done:
026d ---- adb7                         rts




               systemAgc/event1:
               ;? if(state.tddMode != 1){
026e ---- 0a3e                         ld          R0, [#systemAgc/state/tddMode]
026f ---- 8a01                         cmp         R0, #1
0270 ---- be01                         bneq        /br0000 ; Repaired out-of-range beq
0271 ---- 07a7                         jmp         /id0623
               /br0000:
               ;?     // randomDelay between 0 to 500 microsecond, is delivered by application.
               ;?     U16 n = 0;
               ;?     n = cfg.samplesCount;
0272 ---- 08c1                             ld          R0, [#systemAgc/cfg/samplesCount]
               ;?     fwDelayUs(input.randomDelayRX[n]);
0273 ---- 10c4                             ld          R1, #(systemAgc/input/randomDelayRX + 0)
0274 ---- 8f19                             ld          R0, [R1+R0]
0275 ---- 8801                             add         R0, #1
0276 ---- 8b49                             out         R0, [#IOP_EVCTL_PROGDLY]
0277 ---- 8db1                             wev1        #WEVSEL_PROG_DLY
               ;?
               ;?     // Select ADC input
               ;?     //adcSelectGpioInput(AUXIO_A_SENSOR_OUTPUT);
               ;?
               ;?     // Enable the ADC
               ;?     adcEnableSync(ADC_REF_FIXED, ADC_SAMPLE_TIME_2P7_US, ADC_TRIGGER_MANUAL); // manual sampling, 2.7 us sample time
0278 ---- 0020                             ld          R0, #32
0279 ---- 8b49                             out         R0, [#IOP_EVCTL_PROGDLY]
027a ---- 8db1                             wev1        #WEVSEL_PROG_DLY
027b ---- 0041                             ld          R0, #((0 | (((3 < 6) & (!0)) * ADI16_ADCREF_REF_ON_IDLE)) | ADI16_ADCREF_EN)
027c ---- 8b9f                             out         R0, [#IOP_ADISET_ADCREF]
027d 863f 0301                             ld          R0, #((63 << 8) | 0x0001)
027f ---- 6467                             iobset      #IOB_SYSIF_ADCCLKCTL_REQ, [#IOP_SYSIF_ADCCLKCTL]
               /id0630:
0280 ---- 2567                             iobtst      #IOB_SYSIF_ADCCLKCTL_ACK, [#IOP_SYSIF_ADCCLKCTL]
0281 ---- a6fe                             biob0       /id0630
0282 ---- 8b8e                             out         R0, [#IOP_ANAIF_ADCCTL]
0283 ---- 0078                             ld          R0, #BV_ADI16_ADC_SMPL_CYCLE_EXP
0284 ---- 8ba6                             out         R0, [#IOP_ADICLR_ADC]
0285 ---- 0018                             ld          R0, #(3 << BI_ADI16_ADC_SMPL_CYCLE_EXP)
0286 ---- 8b9e                             out         R0, [#IOP_ADISET_ADC]
0287 ---- 0003                             ld          R0, #(ADI16_ADC_EN | ADI16_ADC_RESET_N)
0288 ---- 8b9e                             out         R0, [#IOP_ADISET_ADC]
0289 ---- 8b9e                             out         R0, [#IOP_ADISET_ADC]
028a ---- 8b9e                             out         R0, [#IOP_ADISET_ADC]
028b ---- 8b9e                             out         R0, [#IOP_ADISET_ADC]
               ;?     //adcEnableAsync(ADC_REF_FIXED, ADC_TRIGGER_MANUAL);
               ;?     //timer0Start(TIMER0_MODE_PERIODICAL, 120, 0);
               ;?
               ;?     // Initialize variables, only 6 are available
               ;?     U16 a = 0;
028c ---- 1000                             ld          R1, #0
               ;?     S16 b = 0;
               ;?     U16 c = 0;
               ;?     U16 d = 0;
028d ---- 2000                             ld          R2, #0
               ;?     U16 e = 0;
028e ---- 3000                             ld          R3, #0
               ;?     U16 f = 0;
               ;?
               ;?     // 2.7 sample time, 3 pins, 4 channels.
               ;?     // 2.7 us for each channel. 2.7 * 4 = 10.8 us sampling rate on PIN.
               ;?
               ;?     n = 0;
028f ---- 0000                             ld          R0, #0
               ;?     while (n < MULTI_BUFFER_SIZE) {
               /id0639:
0290 ---- 8a50                             cmp         R0, #80
0291 ---- a655                             bgeu        /id0640
               ;?         // gpioClearOutput(cfg.pAuxioOChannelControl[0]);
               ;?         // gpioClearOutput(cfg.pAuxioOChannelControl[1]);
               ;?         gpioSetOutput(cfg.pAuxioOChannelControl[0]);
0292 ---- 78bf                                 ld          R7, [#(systemAgc/cfg/pAuxioOChannelControl + 0)]
0293 8605 1509                                 jsr         gpioSetOutput
               ;?         gpioSetOutput(cfg.pAuxioOChannelControl[1]);
0295 ---- 78c0                                 ld          R7, [#(systemAgc/cfg/pAuxioOChannelControl + 1)]
0296 8605 1509                                 jsr         gpioSetOutput
               ;?         if(cfg.channelsSwitch == 2){
0298 ---- 48b9                                 ld          R4, [#systemAgc/cfg/channelsSwitch]
0299 ---- ca02                                 cmp         R4, #2
029a ---- be03                                 bneq        /id0650
               ;?             // gpioSetOutput(cfg.pAuxioOChannelControl[0]);
               ;?             gpioClearOutput(cfg.pAuxioOChannelControl[0]);
029b ---- 78bf                                     ld          R7, [#(systemAgc/cfg/pAuxioOChannelControl + 0)]
029c 8605 1512                                     jsr         gpioClearOutput
               ;?         }
               /id0650:
               ;?         if(cfg.channelsSwitch == 3){
029e ---- 48b9                                 ld          R4, [#systemAgc/cfg/channelsSwitch]
029f ---- ca03                                 cmp         R4, #3
02a0 ---- be03                                 bneq        /id0656
               ;?             // gpioSetOutput(cfg.pAuxioOChannelControl[1]);
               ;?             gpioClearOutput(cfg.pAuxioOChannelControl[1]);
02a1 ---- 78c0                                     ld          R7, [#(systemAgc/cfg/pAuxioOChannelControl + 1)]
02a2 8605 1512                                     jsr         gpioClearOutput
               ;?         }
               /id0656:
               ;?         if(cfg.channelsSwitch == 4){
02a4 ---- 48b9                                 ld          R4, [#systemAgc/cfg/channelsSwitch]
02a5 ---- ca04                                 cmp         R4, #4
02a6 ---- be06                                 bneq        /id0662
               ;?             // gpioSetOutput(cfg.pAuxioOChannelControl[0]);
               ;?             // gpioSetOutput(cfg.pAuxioOChannelControl[1]);
               ;?             gpioClearOutput(cfg.pAuxioOChannelControl[0]);
02a7 ---- 78bf                                     ld          R7, [#(systemAgc/cfg/pAuxioOChannelControl + 0)]
02a8 8605 1512                                     jsr         gpioClearOutput
               ;?             gpioClearOutput(cfg.pAuxioOChannelControl[1]);
02aa ---- 78c0                                     ld          R7, [#(systemAgc/cfg/pAuxioOChannelControl + 1)]
02ab 8605 1512                                     jsr         gpioClearOutput
               ;?         }
               /id0662:
               ;?         while(a < cfg.channelsNum){
               /id0672:
02ad ---- 48b8                                 ld          R4, [#systemAgc/cfg/channelsNum]
02ae ---- 9d2c                                 cmp         R1, R4
02af ---- a635                                 bgeu        /id0673
               ;?             // Select channel
               ;?             // a = channel
               ;?             if(cfg.unitType == 0){
02b0 ---- 48c3                                     ld          R4, [#systemAgc/cfg/unitType]
02b1 ---- ca00                                     cmp         R4, #0
02b2 ---- be04                                     bneq        /id0676
               ;?                adcSelectGpioInput(cfg.pAuxioASensorOutput[0]);
02b3 ---- 78bc                                         ld          R7, [#(systemAgc/cfg/pAuxioASensorOutput + 0)]
02b4 8605 151b                                         jsr         AdccompbSelectGpioInput
               ;?             }else{
02b6 ---- 06ba                                     jmp         /id0678
               /id0676:
               ;?                 adcSelectGpioInput(cfg.pAuxioASensorOutput[1]);
02b7 ---- 78bd                                         ld          R7, [#(systemAgc/cfg/pAuxioASensorOutput + 1)]
02b8 8605 151b                                         jsr         AdccompbSelectGpioInput
               ;?             }
               /id0678:
               ;?             adcGenManualTrigger();
02ba ---- 6491                                     iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;?             adcReadFifo(output.pSamplesMultiChannelRF[n]);
02bb ---- edb1                                     wev1        #WEVSEL_ADC_FIFO_NOT_EMPTY
02bc ---- c990                                     in          R4, [#IOP_ANAIF_ADCFIFO]
02bd ---- 51ea                                     ld          R5, #(systemAgc/output/pSamplesMultiChannelRF + 0)
02be ---- cf3d                                     st          R4, [R5+R0]
               ;?             adcSelectGpioInput(cfg.pAuxioASensorOutput[2]);
02bf ---- 78be                                     ld          R7, [#(systemAgc/cfg/pAuxioASensorOutput + 2)]
02c0 8605 151b                                     jsr         AdccompbSelectGpioInput
               ;?             adcGenManualTrigger();
02c2 ---- 6491                                     iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;?             adcReadFifo(output.pSamplesMultiChannelIF[n]);
02c3 ---- edb1                                     wev1        #WEVSEL_ADC_FIFO_NOT_EMPTY
02c4 ---- c990                                     in          R4, [#IOP_ANAIF_ADCFIFO]
02c5 ---- 519a                                     ld          R5, #(systemAgc/output/pSamplesMultiChannelIF + 0)
02c6 ---- cf3d                                     st          R4, [R5+R0]
               ;?             n += 1;
02c7 ---- 8801                                     add         R0, #1
               ;?             a += 1; // select channel with gpio pins
02c8 ---- 9801                                     add         R1, #1
               ;?             if(cfg.channelsSwitch == 0){
02c9 ---- 48b9                                     ld          R4, [#systemAgc/cfg/channelsSwitch]
02ca ---- ca00                                     cmp         R4, #0
02cb ---- be18                                     bneq        /id0694
               ;?                 if(a == 1){
02cc ---- 9a01                                         cmp         R1, #1
02cd ---- be06                                         bneq        /id0696
               ;?                     // gpioSetOutput(cfg.pAuxioOChannelControl[0]);
               ;?                     // gpioClearOutput(cfg.pAuxioOChannelControl[1]);
               ;?                     gpioClearOutput(cfg.pAuxioOChannelControl[0]);
02ce ---- 78bf                                             ld          R7, [#(systemAgc/cfg/pAuxioOChannelControl + 0)]
02cf 8605 1512                                             jsr         gpioClearOutput
               ;?                     gpioSetOutput(cfg.pAuxioOChannelControl[1]);
02d1 ---- 78c0                                             ld          R7, [#(systemAgc/cfg/pAuxioOChannelControl + 1)]
02d2 8605 1509                                             jsr         gpioSetOutput
               ;?                 }
               /id0696:
               ;?                 if (a == 2){
02d4 ---- 9a02                                         cmp         R1, #2
02d5 ---- be06                                         bneq        /id0706
               ;?                     // gpioClearOutput(cfg.pAuxioOChannelControl[0]);
               ;?                     // gpioSetOutput(cfg.pAuxioOChannelControl[1]);
               ;?                     gpioSetOutput(cfg.pAuxioOChannelControl[0]);
02d6 ---- 78bf                                             ld          R7, [#(systemAgc/cfg/pAuxioOChannelControl + 0)]
02d7 8605 1509                                             jsr         gpioSetOutput
               ;?                     gpioClearOutput(cfg.pAuxioOChannelControl[1]);
02d9 ---- 78c0                                             ld          R7, [#(systemAgc/cfg/pAuxioOChannelControl + 1)]
02da 8605 1512                                             jsr         gpioClearOutput
               ;?                 }
               /id0706:
               ;?                 if (a == 3){
02dc ---- 9a03                                         cmp         R1, #3
02dd ---- be06                                         bneq        /id0716
               ;?                     // gpioSetOutput(cfg.pAuxioOChannelControl[0]);
               ;?                     // gpioSetOutput(cfg.pAuxioOChannelControl[1]);
               ;?                     gpioClearOutput(cfg.pAuxioOChannelControl[0]);
02de ---- 78bf                                             ld          R7, [#(systemAgc/cfg/pAuxioOChannelControl + 0)]
02df 8605 1512                                             jsr         gpioClearOutput
               ;?                     gpioClearOutput(cfg.pAuxioOChannelControl[1]);
02e1 ---- 78c0                                             ld          R7, [#(systemAgc/cfg/pAuxioOChannelControl + 1)]
02e2 8605 1512                                             jsr         gpioClearOutput
               ;?                 }
               /id0716:
               ;?             }
               /id0694:
               ;?
               ;?         }
02e4 ---- 06ad                                 jmp         /id0672
               /id0673:
               ;?         a = 0;
02e5 ---- 1000                                 ld          R1, #0
               ;?     }
02e6 ---- 0690                             jmp         /id0639
               /id0640:
               ;?     // Disable the ADC
               ;?     adcDisable();
02e7 8605 1526                             jsr         AdcDisable
               ;?
               ;?     a = 0;
02e9 ---- 1000                             ld          R1, #0
               ;?     b = 0;
02ea ---- 5000                             ld          R5, #0
               ;?     c = 0;
02eb ---- 6000                             ld          R6, #0
               ;?     n = 0;
02ec ---- 0000                             ld          R0, #0
               ;?     f = 0;
02ed ---- 7000                             ld          R7, #0
               ;?     // get top and bottom 20% of results from samples.
               ;?     while(f < cfg.channelsNum){
               /id0733:
02ee ---- 48b8                             ld          R4, [#systemAgc/cfg/channelsNum]
02ef ---- fd2c                             cmp         R7, R4
02f0 ---- a652                             bgeu        /id0734
               ;?         while(n<BUFFER_SIZE){
               /id0737:
02f1 ---- 8a14                                 cmp         R0, #20
02f2 ---- a64d                                 bgeu        /id0738
               ;?             c = n;
02f3 ---- ed40                                     ld          R6, R0
               ;?             accMul16s16u(n, cfg.channelsNum);
02f4 ---- 18b8                                     ld          R1, [#systemAgc/cfg/channelsNum]
02f5 ---- 8b09                                     out         R0, [#IOP_MAC_OP0S]
02f6 ---- 9b0c                                     out         R1, [#IOP_MAC_OP1UMUL]
               ;?             accGet16(0; n);
02f7 8620 8938                                     in          R0, [#(IOP_MAC_ACC_READ_BASE + (4 * 0))]
               ;?             n += f;
02f9 ---- 8d27                                     add         R0, R7
               ;?             a = output.pSamplesMultiChannelRF[n];
02fa ---- 11ea                                     ld          R1, #(systemAgc/output/pSamplesMultiChannelRF + 0)
02fb ---- 9f19                                     ld          R1, [R1+R0]
               ;?             b = MODES_CHANNEL_SIZE - 1;
02fc ---- 500b                                     ld          R5, #11
               ;?             // check if smaple is greaer than any of the samples in maxmodes
               ;?             while( b >= 0){
               /id0750:
02fd ---- da00                                     cmp         R5, #0
02fe ---- ee19                                     blts        /id0751
               ;?                 accMul16s16u(f, MODES_CHANNEL_SIZE);
02ff ---- 000c                                         ld          R0, #12
0300 ---- fb09                                         out         R7, [#IOP_MAC_OP0S]
0301 ---- 8b0c                                         out         R0, [#IOP_MAC_OP1UMUL]
               ;?                 accGet16(0; n);
0302 8620 8938                                         in          R0, [#(IOP_MAC_ACC_READ_BASE + (4 * 0))]
               ;?                 n += b;
0304 ---- 8d25                                         add         R0, R5
               ;?                 d = output.maxModesRFRX[n];
0305 ---- 213a                                         ld          R2, #(systemAgc/output/maxModesRFRX + 0)
0306 ---- af1a                                         ld          R2, [R2+R0]
               ;?                 if(d < a){
0307 ---- ad29                                         cmp         R2, R1
0308 ---- a60d                                         bgeu        /id0761
               ;?                     output.maxModesRFRX[n] = a;
0309 ---- 413a                                             ld          R4, #(systemAgc/output/maxModesRFRX + 0)
030a ---- 9f3c                                             st          R1, [R4+R0]
               ;?                     while(0 < b){
               /id0766:
030b ---- da00                                             cmp         R5, #0
030c ---- fe08                                             bles        /id0767
               ;?                         n -= 1;
030d ---- 88ff                                                 add         R0, #-1
               ;?                         b -= 1;
030e ---- d8ff                                                 add         R5, #-1
               ;?                         e = output.maxModesRFRX[n];
030f ---- 313a                                                 ld          R3, #(systemAgc/output/maxModesRFRX + 0)
0310 ---- bf1b                                                 ld          R3, [R3+R0]
               ;?                         output.maxModesRFRX[n] = d;
0311 ---- 413a                                                 ld          R4, #(systemAgc/output/maxModesRFRX + 0)
0312 ---- af3c                                                 st          R2, [R4+R0]
               ;?                         d = e;
0313 ---- ad43                                                 ld          R2, R3
               ;?                     }
0314 ---- 070b                                             jmp         /id0766
               /id0767:
               ;?                     b = 0; // so b will be below 0 and loop will break
0315 ---- 5000                                             ld          R5, #0
               ;?                 }
               /id0761:
               ;?                 b -=1;
0316 ---- d8ff                                         add         R5, #-1
               ;?             }
0317 ---- 06fd                                     jmp         /id0750
               /id0751:
               ;?
               ;?             n = c;
0318 ---- 8d46                                     ld          R0, R6
               ;?             accMul16s16u(n, cfg.channelsNum);
0319 ---- 18b8                                     ld          R1, [#systemAgc/cfg/channelsNum]
031a ---- 8b09                                     out         R0, [#IOP_MAC_OP0S]
031b ---- 9b0c                                     out         R1, [#IOP_MAC_OP1UMUL]
               ;?             accGet16(0; n);
031c 8620 8938                                     in          R0, [#(IOP_MAC_ACC_READ_BASE + (4 * 0))]
               ;?             n += f;
031e ---- 8d27                                     add         R0, R7
               ;?             a = output.pSamplesMultiChannelIF[n];
031f ---- 119a                                     ld          R1, #(systemAgc/output/pSamplesMultiChannelIF + 0)
0320 ---- 9f19                                     ld          R1, [R1+R0]
               ;?             b = MODES_CHANNEL_SIZE - 1;
0321 ---- 500b                                     ld          R5, #11
               ;?
               ;?             while(b >= 0){
               /id0788:
0322 ---- da00                                     cmp         R5, #0
0323 ---- ee19                                     blts        /id0789
               ;?                 accMul16s16u(f, MODES_CHANNEL_SIZE);
0324 ---- 000c                                         ld          R0, #12
0325 ---- fb09                                         out         R7, [#IOP_MAC_OP0S]
0326 ---- 8b0c                                         out         R0, [#IOP_MAC_OP1UMUL]
               ;?                 accGet16(0; n);
0327 8620 8938                                         in          R0, [#(IOP_MAC_ACC_READ_BASE + (4 * 0))]
               ;?                 n += b;
0329 ---- 8d25                                         add         R0, R5
               ;?                 d = output.maxModesIFRX[n];
032a ---- 20da                                         ld          R2, #(systemAgc/output/maxModesIFRX + 0)
032b ---- af1a                                         ld          R2, [R2+R0]
               ;?                 if(d < a){
032c ---- ad29                                         cmp         R2, R1
032d ---- a60d                                         bgeu        /id0799
               ;?                     output.maxModesIFRX[n] = a;
032e ---- 40da                                             ld          R4, #(systemAgc/output/maxModesIFRX + 0)
032f ---- 9f3c                                             st          R1, [R4+R0]
               ;?                     while(0 < b){
               /id0804:
0330 ---- da00                                             cmp         R5, #0
0331 ---- fe08                                             bles        /id0805
               ;?                         n -= 1;
0332 ---- 88ff                                                 add         R0, #-1
               ;?                         b -= 1;
0333 ---- d8ff                                                 add         R5, #-1
               ;?                         e = output.maxModesIFRX[n];
0334 ---- 30da                                                 ld          R3, #(systemAgc/output/maxModesIFRX + 0)
0335 ---- bf1b                                                 ld          R3, [R3+R0]
               ;?                         output.maxModesIFRX[n] = d;
0336 ---- 40da                                                 ld          R4, #(systemAgc/output/maxModesIFRX + 0)
0337 ---- af3c                                                 st          R2, [R4+R0]
               ;?                         d = e;
0338 ---- ad43                                                 ld          R2, R3
               ;?                     }
0339 ---- 0730                                             jmp         /id0804
               /id0805:
               ;?                     b = 0; // so loop will break
033a ---- 5000                                             ld          R5, #0
               ;?                 }
               /id0799:
               ;?                 b -=1;
033b ---- d8ff                                         add         R5, #-1
               ;?             }
033c ---- 0722                                     jmp         /id0788
               /id0789:
               ;?             n = c;
033d ---- 8d46                                     ld          R0, R6
               ;?             n += 1;
033e ---- 8801                                     add         R0, #1
               ;?         }
033f ---- 06f1                                 jmp         /id0737
               /id0738:
               ;?         n = 0;
0340 ---- 0000                                 ld          R0, #0
               ;?         f += 1;
0341 ---- f801                                 add         R7, #1
               ;?
               ;?     }
0342 ---- 06ee                             jmp         /id0733
               /id0734:
               ;?
               ;?     cfg.samplesCount -= 1;
0343 ---- 08c1                             ld          R0, [#systemAgc/cfg/samplesCount]
0344 ---- 88ff                             add         R0, #-1
0345 ---- 0cc1                             st          R0, [#systemAgc/cfg/samplesCount]
               ;?
               ;?     n = 0;
0346 ---- 0000                             ld          R0, #0
               ;?     a = 0;
0347 ---- 1000                             ld          R1, #0
               ;?     b = 0;
0348 ---- 5000                             ld          R5, #0
               ;?     c = 0;
0349 ---- 6000                             ld          R6, #0
               ;?     d = 0;
034a ---- 2000                             ld          R2, #0
               ;?     e = 0;
               ;?     f = 0;
034b ---- 7000                             ld          R7, #0
               ;?     // after 5 cycles of measures
               ;?     if(cfg.samplesCount == 0){
034c ---- 38c1                             ld          R3, [#systemAgc/cfg/samplesCount]
034d ---- ba00                             cmp         R3, #0
034e ---- be43                             bneq        /id0829
               ;?
               ;?         // we now have in output.maxModes array with top 20% of results for each channel. channel0, channel1...
               ;?         // from the top 20% results we sort by ranges for each channel to determine which range has most results
               ;?
               ;?         // clear values in modes arrays
               ;?         while(n<CHANNELS_NUMBER){
               /id0831:
034f ---- 8a04                                 cmp         R0, #4
0350 ---- a608                                 bgeu        /id0832
               ;?             output.channelsMaxRFRX[n] = 0;
0351 ---- 3000                                     ld          R3, #0
0352 ---- 40d2                                     ld          R4, #(systemAgc/output/channelsMaxRFRX + 0)
0353 ---- bf3c                                     st          R3, [R4+R0]
               ;?             output.channelsMaxIFRX[n] = 0;
0354 ---- 3000                                     ld          R3, #0
0355 ---- 40ca                                     ld          R4, #(systemAgc/output/channelsMaxIFRX + 0)
0356 ---- bf3c                                     st          R3, [R4+R0]
               ;?             n +=1;
0357 ---- 8801                                     add         R0, #1
               ;?         }
0358 ---- 074f                                 jmp         /id0831
               /id0832:
               ;?
               ;?         n = 0;
0359 ---- 0000                                 ld          R0, #0
               ;?         while(f<cfg.channelsNum){
               /id0840:
035a ---- 38b8                                 ld          R3, [#systemAgc/cfg/channelsNum]
035b ---- fd2b                                 cmp         R7, R3
035c ---- a619                                 bgeu        /id0841
               ;?             while(a<MODES_CHANNEL_SIZE){
               /id0844:
035d ---- 9a0c                                     cmp         R1, #12
035e ---- a614                                     bgeu        /id0845
               ;?                 b = n;
035f ---- dd40                                         ld          R5, R0
               ;?                 c = output.maxModesRFRX[n];
0360 ---- 213a                                         ld          R2, #(systemAgc/output/maxModesRFRX + 0)
0361 ---- ef1a                                         ld          R6, [R2+R0]
               ;?                 d = output.maxModesIFRX[n];
0362 ---- 20da                                         ld          R2, #(systemAgc/output/maxModesIFRX + 0)
0363 ---- af1a                                         ld          R2, [R2+R0]
               ;?                 n = f;
0364 ---- 8d47                                         ld          R0, R7
               ;?                 output.channelsMaxRFRX[n] += c;
0365 ---- 30d2                                         ld          R3, #(systemAgc/output/channelsMaxRFRX + 0)
0366 ---- bf1b                                         ld          R3, [R3+R0]
0367 ---- bd26                                         add         R3, R6
0368 ---- 40d2                                         ld          R4, #(systemAgc/output/channelsMaxRFRX + 0)
0369 ---- bf3c                                         st          R3, [R4+R0]
               ;?                 output.channelsMaxIFRX[n] += d;
036a ---- 30ca                                         ld          R3, #(systemAgc/output/channelsMaxIFRX + 0)
036b ---- bf1b                                         ld          R3, [R3+R0]
036c ---- bd22                                         add         R3, R2
036d ---- 40ca                                         ld          R4, #(systemAgc/output/channelsMaxIFRX + 0)
036e ---- bf3c                                         st          R3, [R4+R0]
               ;?                 a+=1;
036f ---- 9801                                         add         R1, #1
               ;?                 n = b;
0370 ---- 8d45                                         ld          R0, R5
               ;?                 n+=1;
0371 ---- 8801                                         add         R0, #1
               ;?             }
0372 ---- 075d                                     jmp         /id0844
               /id0845:
               ;?             a = 0;
0373 ---- 1000                                     ld          R1, #0
               ;?             f += 1;
0374 ---- f801                                     add         R7, #1
               ;?         }
0375 ---- 075a                                 jmp         /id0840
               /id0841:
               ;?
               ;?         // clear values in modes arrays
               ;?         n = 0;
0376 ---- 0000                                 ld          R0, #0
               ;?         while(n<MODES_SIZE){
               /id0871:
0377 ---- 8a30                                 cmp         R0, #48
0378 ---- a608                                 bgeu        /id0872
               ;?             output.maxModesRFRX[n] = 0;
0379 ---- 1000                                     ld          R1, #0
037a ---- 213a                                     ld          R2, #(systemAgc/output/maxModesRFRX + 0)
037b ---- 9f3a                                     st          R1, [R2+R0]
               ;?             output.maxModesIFRX[n] = 0;
037c ---- 1000                                     ld          R1, #0
037d ---- 20da                                     ld          R2, #(systemAgc/output/maxModesIFRX + 0)
037e ---- 9f3a                                     st          R1, [R2+R0]
               ;?             n += 1;
037f ---- 8801                                     add         R0, #1
               ;?         }
0380 ---- 0777                                 jmp         /id0871
               /id0872:
               ;?         n = 0;
               ;?         if(state.tddMode == 0){
0381 ---- 0a3e                                 ld          R0, [#systemAgc/state/tddMode]
0382 ---- 8a00                                 cmp         R0, #0
0383 ---- be0e                                 bneq        /id0880
               ;?             cfg.samplesCount = SAMPLE_SIZE;
0384 ---- 0003                                     ld          R0, #3
0385 ---- 0cc1                                     st          R0, [#systemAgc/cfg/samplesCount]
               ;?             rtlLogStructs(BV_RTL_LOG_OUTPUT);
0386 ---- 0004                                     ld          R0, #4
0387 ---- 18ab                                     ld          R1, [#(pRtlTaskLogMaskTable + 0)]
0388 ---- 8d01                                     and         R0, R1
0389 ---- 0caa                                     st          R0, [#(pRtlTaskLogReqTable + 0)]
               ;?             // if interrupt flag is enabled, raises the interrupt for application to process results
               ;?             if(state.alertEnabled == 1) {
038a ---- 0a3a                                     ld          R0, [#systemAgc/state/alertEnabled]
038b ---- 8a01                                     cmp         R0, #1
038c ---- be05                                     bneq        /id0885
               ;?                 state.alertEnabled = 0;
038d ---- 0000                                         ld          R0, #0
038e ---- 0e3a                                         st          R0, [#systemAgc/state/alertEnabled]
               ;?                 fwGenQuickAlertInterrupt();
038f ---- 6540                                         iobset      #IOB_EVCTL_SWEV_ALERT, [#IOP_EVCTL_SWEVSET]
0390 ---- 0000                                         ld          R0, #0
0391 ---- 0caf                                         st          R0, [#fwCtrlInt/alertGenMask]
               ;?             }
               /id0885:
               ;?         }
               /id0880:
               ;?     }
               /id0829:
               ;?
               ;?
               ;?     // Stop the ADC trigger and flush the ADC FIFO
               ;?     //timer0Stop();
               ;?     //adcFlushFifo();
               ;?
               ;?
               ;?     // schedule the next task execution
               ;?     //evhSetupGpioTrigger(0, AUXIO_I_TDD_LOCK, 0, EVH_GPIO_TRIG_ON_MATCH);
               ;?     // for testing
               ;?     //fwScheduleTask(1);
               ;?     if(state.tddMode == 2){
0392 ---- 0a3e                             ld          R0, [#systemAgc/state/tddMode]
0393 ---- 8a02                             cmp         R0, #2
0394 ---- be06                             bneq        /id0889
               ;?         evhSetupGpioTrigger(2, AUXIO_I_TDD_SYNCH, 0, EVH_GPIO_TRIG_ON_EDGE);
0395 ---- 0084                                 ld          R0, #((4 + SYSIF_PROGWUCFG_SRC_AUXIO0) |((0 == 0) << IOB_SYSIF_PROGWUCFG_POL))
0396 ---- 8b58                                 out         R0, [#((IOP_SYSIF_PROGWU1CFG + 0) + 2)]
0397 ---- 675b                                 iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 2), [#IOP_SYSIF_WUFLAGSCLR]
0398 ---- 7658                                 iobset      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 0) + 2)]
0399 ---- 475b                                 iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 2), [#IOP_SYSIF_WUFLAGSCLR]
               ;?         //evhSetupTimer0Trigger(0, 100, 2);
               ;?     }else{
039a ---- 07a6                             jmp         /id0891
               /id0889:
               ;?         evhSetupTimer0Trigger(2, 1, 2);
039b ---- 0001                                 ld          R0, #1
039c ---- 8b81                                 out         R0, [#IOP_TIMER01_T0TARGET]
039d 8623 0322                                 ld          R0, #(((2 << IOB_TIMER01_TXCFG_PRE) | TIMER01_TXCFG_TICK_SRC_AON_RTC_4KHZ) | BV_TIMER01_TXCFG_MODE_TICK)
039f ---- 8b7d                                 out         R0, [#IOP_TIMER01_T0CFG]
03a0 ---- 0036                                 ld          R0, #SYSIF_PROGWUCFG_SRC_AUX_TIMER0_EV
03a1 ---- 8b58                                 out         R0, [#((IOP_SYSIF_PROGWU1CFG + 0) + 2)]
03a2 ---- 675b                                 iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 2), [#IOP_SYSIF_WUFLAGSCLR]
03a3 ---- 475b                                 iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 2), [#IOP_SYSIF_WUFLAGSCLR]
03a4 ---- 7658                                 iobset      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 0) + 2)]
03a5 ---- 647f                                 iobset      #0, [#IOP_TIMER01_T0CTL]
               ;?     }
               /id0891:
               ;? }else{
03a6 ---- 07b2                         jmp         /id0625
               /id0623:
               ;?     evhSetupTimer0Trigger(2, 1, 2);
03a7 ---- 0001                             ld          R0, #1
03a8 ---- 8b81                             out         R0, [#IOP_TIMER01_T0TARGET]
03a9 8623 0322                             ld          R0, #(((2 << IOB_TIMER01_TXCFG_PRE) | TIMER01_TXCFG_TICK_SRC_AON_RTC_4KHZ) | BV_TIMER01_TXCFG_MODE_TICK)
03ab ---- 8b7d                             out         R0, [#IOP_TIMER01_T0CFG]
03ac ---- 0036                             ld          R0, #SYSIF_PROGWUCFG_SRC_AUX_TIMER0_EV
03ad ---- 8b58                             out         R0, [#((IOP_SYSIF_PROGWU1CFG + 0) + 2)]
03ae ---- 675b                             iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 2), [#IOP_SYSIF_WUFLAGSCLR]
03af ---- 475b                             iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 2), [#IOP_SYSIF_WUFLAGSCLR]
03b0 ---- 7658                             iobset      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 0) + 2)]
03b1 ---- 647f                             iobset      #0, [#IOP_TIMER01_T0CTL]
               ;? }
               /id0625:
               systemAgc/event1Done:
03b2 ---- adb7                         rts




               systemAgc/event2:
               ;? if(state.tddMode > 0){
03b3 ---- 0a3e                         ld          R0, [#systemAgc/state/tddMode]
03b4 ---- 8a00                         cmp         R0, #0
03b5 ---- 9602                         bgtu        /br0001 ; Repaired out-of-range bleu
03b6 8604 04fc                         jmp         /id0904
               /br0001:
               ;?     // randomDelay between 0 to 500 microsecond, is delivered by application.
               ;?     U16 n = 0;
               ;?     n = cfg.samplesCount;
03b8 ---- 08c1                             ld          R0, [#systemAgc/cfg/samplesCount]
               ;?     fwDelayUs(input.randomDelayTX[n]);
03b9 ---- 10c7                             ld          R1, #(systemAgc/input/randomDelayTX + 0)
03ba ---- 8f19                             ld          R0, [R1+R0]
03bb ---- 8801                             add         R0, #1
03bc ---- 8b49                             out         R0, [#IOP_EVCTL_PROGDLY]
03bd ---- 8db1                             wev1        #WEVSEL_PROG_DLY
               ;?
               ;?     // Select ADC input
               ;?     //adcSelectGpioInput(AUXIO_A_SENSOR_OUTPUT);
               ;?
               ;?     // Enable the ADC
               ;?     adcEnableSync(ADC_REF_FIXED, ADC_SAMPLE_TIME_2P7_US, ADC_TRIGGER_MANUAL); // manual sampling, 2.7 us sample time
03be ---- 0020                             ld          R0, #32
03bf ---- 8b49                             out         R0, [#IOP_EVCTL_PROGDLY]
03c0 ---- 8db1                             wev1        #WEVSEL_PROG_DLY
03c1 ---- 0041                             ld          R0, #((0 | (((3 < 6) & (!0)) * ADI16_ADCREF_REF_ON_IDLE)) | ADI16_ADCREF_EN)
03c2 ---- 8b9f                             out         R0, [#IOP_ADISET_ADCREF]
03c3 863f 0301                             ld          R0, #((63 << 8) | 0x0001)
03c5 ---- 6467                             iobset      #IOB_SYSIF_ADCCLKCTL_REQ, [#IOP_SYSIF_ADCCLKCTL]
               /id0911:
03c6 ---- 2567                             iobtst      #IOB_SYSIF_ADCCLKCTL_ACK, [#IOP_SYSIF_ADCCLKCTL]
03c7 ---- a6fe                             biob0       /id0911
03c8 ---- 8b8e                             out         R0, [#IOP_ANAIF_ADCCTL]
03c9 ---- 0078                             ld          R0, #BV_ADI16_ADC_SMPL_CYCLE_EXP
03ca ---- 8ba6                             out         R0, [#IOP_ADICLR_ADC]
03cb ---- 0018                             ld          R0, #(3 << BI_ADI16_ADC_SMPL_CYCLE_EXP)
03cc ---- 8b9e                             out         R0, [#IOP_ADISET_ADC]
03cd ---- 0003                             ld          R0, #(ADI16_ADC_EN | ADI16_ADC_RESET_N)
03ce ---- 8b9e                             out         R0, [#IOP_ADISET_ADC]
03cf ---- 8b9e                             out         R0, [#IOP_ADISET_ADC]
03d0 ---- 8b9e                             out         R0, [#IOP_ADISET_ADC]
03d1 ---- 8b9e                             out         R0, [#IOP_ADISET_ADC]
               ;?     //adcEnableAsync(ADC_REF_FIXED, ADC_TRIGGER_MANUAL);
               ;?     //timer0Start(TIMER0_MODE_PERIODICAL, 120, 0);
               ;?
               ;?     // Initialize variables, only 6 are available
               ;?     U16 a = 0;
03d2 ---- 1000                             ld          R1, #0
               ;?     S16 b = 0;
               ;?     U16 c = 0;
               ;?     U16 d = 0;
03d3 ---- 2000                             ld          R2, #0
               ;?     U16 e = 0;
03d4 ---- 3000                             ld          R3, #0
               ;?     U16 f = 0;
               ;?
               ;?     // 2.7 sample time, 3 pins, 4 channels.
               ;?     // 2.7 us for each channel. 2.7 * 4 = 10.8 us sampling rate on PIN.
               ;?
               ;?     n = 0;
03d5 ---- 0000                             ld          R0, #0
               ;?     while (n < MULTI_BUFFER_SIZE) {
               /id0920:
03d6 ---- 8a50                             cmp         R0, #80
03d7 ---- a656                             bgeu        /id0921
               ;?         gpioClearOutput(cfg.pAuxioOChannelControl[0]);
03d8 ---- 78bf                                 ld          R7, [#(systemAgc/cfg/pAuxioOChannelControl + 0)]
03d9 8605 1512                                 jsr         gpioClearOutput
               ;?         gpioClearOutput(cfg.pAuxioOChannelControl[1]);
03db ---- 78c0                                 ld          R7, [#(systemAgc/cfg/pAuxioOChannelControl + 1)]
03dc 8605 1512                                 jsr         gpioClearOutput
               ;?         // gpioSetOutput(cfg.pAuxioOChannelControl[0]);
               ;?         // gpioSetOutput(cfg.pAuxioOChannelControl[1]);
               ;?         if(cfg.channelsSwitch == 2){
03de ---- 48b9                                 ld          R4, [#systemAgc/cfg/channelsSwitch]
03df ---- ca02                                 cmp         R4, #2
03e0 ---- be03                                 bneq        /id0931
               ;?             gpioSetOutput(cfg.pAuxioOChannelControl[0]);
03e1 ---- 78bf                                     ld          R7, [#(systemAgc/cfg/pAuxioOChannelControl + 0)]
03e2 8605 1509                                     jsr         gpioSetOutput
               ;?             // gpioClearOutput(cfg.pAuxioOChannelControl[0]);
               ;?         }
               /id0931:
               ;?         if(cfg.channelsSwitch == 3){
03e4 ---- 48b9                                 ld          R4, [#systemAgc/cfg/channelsSwitch]
03e5 ---- ca03                                 cmp         R4, #3
03e6 ---- be03                                 bneq        /id0937
               ;?             gpioSetOutput(cfg.pAuxioOChannelControl[1]);
03e7 ---- 78c0                                     ld          R7, [#(systemAgc/cfg/pAuxioOChannelControl + 1)]
03e8 8605 1509                                     jsr         gpioSetOutput
               ;?             // gpioClearOutput(cfg.pAuxioOChannelControl[1]);
               ;?         }
               /id0937:
               ;?         if(cfg.channelsSwitch == 4){
03ea ---- 48b9                                 ld          R4, [#systemAgc/cfg/channelsSwitch]
03eb ---- ca04                                 cmp         R4, #4
03ec ---- be06                                 bneq        /id0943
               ;?             gpioSetOutput(cfg.pAuxioOChannelControl[0]);
03ed ---- 78bf                                     ld          R7, [#(systemAgc/cfg/pAuxioOChannelControl + 0)]
03ee 8605 1509                                     jsr         gpioSetOutput
               ;?             gpioSetOutput(cfg.pAuxioOChannelControl[1]);
03f0 ---- 78c0                                     ld          R7, [#(systemAgc/cfg/pAuxioOChannelControl + 1)]
03f1 8605 1509                                     jsr         gpioSetOutput
               ;?             // gpioClearOutput(cfg.pAuxioOChannelControl[0]);
               ;?             // gpioClearOutput(cfg.pAuxioOChannelControl[1]);
               ;?         }
               /id0943:
               ;?         while(a < cfg.channelsNum){
               /id0953:
03f3 ---- 48b8                                 ld          R4, [#systemAgc/cfg/channelsNum]
03f4 ---- 9d2c                                 cmp         R1, R4
03f5 ---- a636                                 bgeu        /id0954
               ;?             // Select channel
               ;?             // a = channel
               ;?             if(cfg.unitType == 0){
03f6 ---- 48c3                                     ld          R4, [#systemAgc/cfg/unitType]
03f7 ---- ca00                                     cmp         R4, #0
03f8 ---- be05                                     bneq        /id0957
               ;?                adcSelectGpioInput(cfg.pAuxioASensorOutput[1]);
03f9 ---- 78bd                                         ld          R7, [#(systemAgc/cfg/pAuxioASensorOutput + 1)]
03fa 8605 151b                                         jsr         AdccompbSelectGpioInput
               ;?             }else{
03fc 8604 0401                                     jmp         /id0959
               /id0957:
               ;?                 adcSelectGpioInput(cfg.pAuxioASensorOutput[0]);
03fe ---- 78bc                                         ld          R7, [#(systemAgc/cfg/pAuxioASensorOutput + 0)]
03ff 8605 151b                                         jsr         AdccompbSelectGpioInput
               ;?             }
               /id0959:
               ;?             adcGenManualTrigger();
0401 ---- 6491                                     iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;?             adcReadFifo(output.pSamplesMultiChannelRF[n]);
0402 ---- edb1                                     wev1        #WEVSEL_ADC_FIFO_NOT_EMPTY
0403 ---- c990                                     in          R4, [#IOP_ANAIF_ADCFIFO]
0404 ---- 51ea                                     ld          R5, #(systemAgc/output/pSamplesMultiChannelRF + 0)
0405 ---- cf3d                                     st          R4, [R5+R0]
               ;?             adcSelectGpioInput(cfg.pAuxioASensorOutput[2]);
0406 ---- 78be                                     ld          R7, [#(systemAgc/cfg/pAuxioASensorOutput + 2)]
0407 8605 151b                                     jsr         AdccompbSelectGpioInput
               ;?             adcGenManualTrigger();
0409 ---- 6491                                     iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;?             adcReadFifo(output.pSamplesMultiChannelIF[n]);
040a ---- edb1                                     wev1        #WEVSEL_ADC_FIFO_NOT_EMPTY
040b ---- c990                                     in          R4, [#IOP_ANAIF_ADCFIFO]
040c ---- 519a                                     ld          R5, #(systemAgc/output/pSamplesMultiChannelIF + 0)
040d ---- cf3d                                     st          R4, [R5+R0]
               ;?             n += 1;
040e ---- 8801                                     add         R0, #1
               ;?             a += 1; // select channel with gpio pins
040f ---- 9801                                     add         R1, #1
               ;?             if(cfg.channelsSwitch == 0){
0410 ---- 48b9                                     ld          R4, [#systemAgc/cfg/channelsSwitch]
0411 ---- ca00                                     cmp         R4, #0
0412 ---- be18                                     bneq        /id0975
               ;?                 if(a == 1){
0413 ---- 9a01                                         cmp         R1, #1
0414 ---- be06                                         bneq        /id0977
               ;?                     gpioSetOutput(cfg.pAuxioOChannelControl[0]);
0415 ---- 78bf                                             ld          R7, [#(systemAgc/cfg/pAuxioOChannelControl + 0)]
0416 8605 1509                                             jsr         gpioSetOutput
               ;?                     gpioClearOutput(cfg.pAuxioOChannelControl[1]);
0418 ---- 78c0                                             ld          R7, [#(systemAgc/cfg/pAuxioOChannelControl + 1)]
0419 8605 1512                                             jsr         gpioClearOutput
               ;?                     // gpioClearOutput(cfg.pAuxioOChannelControl[0]);
               ;?                     // gpioSetOutput(cfg.pAuxioOChannelControl[1]);
               ;?                 }
               /id0977:
               ;?                 if (a == 2){
041b ---- 9a02                                         cmp         R1, #2
041c ---- be06                                         bneq        /id0987
               ;?                     gpioClearOutput(cfg.pAuxioOChannelControl[0]);
041d ---- 78bf                                             ld          R7, [#(systemAgc/cfg/pAuxioOChannelControl + 0)]
041e 8605 1512                                             jsr         gpioClearOutput
               ;?                     gpioSetOutput(cfg.pAuxioOChannelControl[1]);
0420 ---- 78c0                                             ld          R7, [#(systemAgc/cfg/pAuxioOChannelControl + 1)]
0421 8605 1509                                             jsr         gpioSetOutput
               ;?                     // gpioSetOutput(cfg.pAuxioOChannelControl[0]);
               ;?                     // gpioClearOutput(cfg.pAuxioOChannelControl[1]);
               ;?                 }
               /id0987:
               ;?                 if (a == 3){
0423 ---- 9a03                                         cmp         R1, #3
0424 ---- be06                                         bneq        /id0997
               ;?                     gpioSetOutput(cfg.pAuxioOChannelControl[0]);
0425 ---- 78bf                                             ld          R7, [#(systemAgc/cfg/pAuxioOChannelControl + 0)]
0426 8605 1509                                             jsr         gpioSetOutput
               ;?                     gpioSetOutput(cfg.pAuxioOChannelControl[1]);
0428 ---- 78c0                                             ld          R7, [#(systemAgc/cfg/pAuxioOChannelControl + 1)]
0429 8605 1509                                             jsr         gpioSetOutput
               ;?                     // gpioClearOutput(cfg.pAuxioOChannelControl[0]);
               ;?                     // gpioClearOutput(cfg.pAuxioOChannelControl[1]);
               ;?                 }
               /id0997:
               ;?             }
               /id0975:
               ;?
               ;?         }
042b ---- 07f3                                 jmp         /id0953
               /id0954:
               ;?         a = 0;
042c ---- 1000                                 ld          R1, #0
               ;?     }
042d ---- 07d6                             jmp         /id0920
               /id0921:
               ;?     // Disable the ADC
               ;?     adcDisable();
042e 8605 1526                             jsr         AdcDisable
               ;?
               ;?     a = 0;
0430 ---- 1000                             ld          R1, #0
               ;?     b = 0;
0431 ---- 5000                             ld          R5, #0
               ;?     c = 0;
0432 ---- 6000                             ld          R6, #0
               ;?     n = 0;
0433 ---- 0000                             ld          R0, #0
               ;?     f = 0;
0434 ---- 7000                             ld          R7, #0
               ;?     // get top and bottom 20% of results from samples.
               ;?     while(f < cfg.channelsNum){
               /id1014:
0435 ---- 48b8                             ld          R4, [#systemAgc/cfg/channelsNum]
0436 ---- fd2c                             cmp         R7, R4
0437 ---- a658                             bgeu        /id1015
               ;?         while(n<BUFFER_SIZE){
               /id1018:
0438 ---- 8a14                                 cmp         R0, #20
0439 ---- a652                                 bgeu        /id1019
               ;?             c = n;
043a ---- ed40                                     ld          R6, R0
               ;?             accMul16s16u(n, cfg.channelsNum);
043b ---- 18b8                                     ld          R1, [#systemAgc/cfg/channelsNum]
043c ---- 8b09                                     out         R0, [#IOP_MAC_OP0S]
043d ---- 9b0c                                     out         R1, [#IOP_MAC_OP1UMUL]
               ;?             accGet16(0; n);
043e 8620 8938                                     in          R0, [#(IOP_MAC_ACC_READ_BASE + (4 * 0))]
               ;?             n += f;
0440 ---- 8d27                                     add         R0, R7
               ;?             a = output.pSamplesMultiChannelRF[n];
0441 ---- 11ea                                     ld          R1, #(systemAgc/output/pSamplesMultiChannelRF + 0)
0442 ---- 9f19                                     ld          R1, [R1+R0]
               ;?             b = MODES_CHANNEL_SIZE - 1;
0443 ---- 500b                                     ld          R5, #11
               ;?             // check if smaple is greaer than any of the samples in maxmodes
               ;?             while( b >= 0){
               /id1031:
0444 ---- da00                                     cmp         R5, #0
0445 ---- ee1b                                     blts        /id1032
               ;?                 accMul16s16u(f, MODES_CHANNEL_SIZE);
0446 ---- 000c                                         ld          R0, #12
0447 ---- fb09                                         out         R7, [#IOP_MAC_OP0S]
0448 ---- 8b0c                                         out         R0, [#IOP_MAC_OP1UMUL]
               ;?                 accGet16(0; n);
0449 8620 8938                                         in          R0, [#(IOP_MAC_ACC_READ_BASE + (4 * 0))]
               ;?                 n += b;
044b ---- 8d25                                         add         R0, R5
               ;?                 d = output.maxModesRFTX[n];
044c ---- 216a                                         ld          R2, #(systemAgc/output/maxModesRFTX + 0)
044d ---- af1a                                         ld          R2, [R2+R0]
               ;?                 if(d < a){
044e ---- ad29                                         cmp         R2, R1
044f ---- a60e                                         bgeu        /id1042
               ;?                     output.maxModesRFTX[n] = a;
0450 ---- 416a                                             ld          R4, #(systemAgc/output/maxModesRFTX + 0)
0451 ---- 9f3c                                             st          R1, [R4+R0]
               ;?                     while(0 < b){
               /id1047:
0452 ---- da00                                             cmp         R5, #0
0453 ---- fe09                                             bles        /id1048
               ;?                         n -= 1;
0454 ---- 88ff                                                 add         R0, #-1
               ;?                         b -= 1;
0455 ---- d8ff                                                 add         R5, #-1
               ;?                         e = output.maxModesRFTX[n];
0456 ---- 316a                                                 ld          R3, #(systemAgc/output/maxModesRFTX + 0)
0457 ---- bf1b                                                 ld          R3, [R3+R0]
               ;?                         output.maxModesRFTX[n] = d;
0458 ---- 416a                                                 ld          R4, #(systemAgc/output/maxModesRFTX + 0)
0459 ---- af3c                                                 st          R2, [R4+R0]
               ;?                         d = e;
045a ---- ad43                                                 ld          R2, R3
               ;?                     }
045b 8604 0452                                             jmp         /id1047
               /id1048:
               ;?                     b = 0; // so b will be below 0 and loop will break
045d ---- 5000                                             ld          R5, #0
               ;?                 }
               /id1042:
               ;?                 b -=1;
045e ---- d8ff                                         add         R5, #-1
               ;?             }
045f 8604 0444                                     jmp         /id1031
               /id1032:
               ;?
               ;?             n = c;
0461 ---- 8d46                                     ld          R0, R6
               ;?             accMul16s16u(n, cfg.channelsNum);
0462 ---- 18b8                                     ld          R1, [#systemAgc/cfg/channelsNum]
0463 ---- 8b09                                     out         R0, [#IOP_MAC_OP0S]
0464 ---- 9b0c                                     out         R1, [#IOP_MAC_OP1UMUL]
               ;?             accGet16(0; n);
0465 8620 8938                                     in          R0, [#(IOP_MAC_ACC_READ_BASE + (4 * 0))]
               ;?             n += f;
0467 ---- 8d27                                     add         R0, R7
               ;?             a = output.pSamplesMultiChannelIF[n];
0468 ---- 119a                                     ld          R1, #(systemAgc/output/pSamplesMultiChannelIF + 0)
0469 ---- 9f19                                     ld          R1, [R1+R0]
               ;?             b = MODES_CHANNEL_SIZE - 1;
046a ---- 500b                                     ld          R5, #11
               ;?
               ;?             while(b >= 0){
               /id1069:
046b ---- da00                                     cmp         R5, #0
046c ---- ee1b                                     blts        /id1070
               ;?                 accMul16s16u(f, MODES_CHANNEL_SIZE);
046d ---- 000c                                         ld          R0, #12
046e ---- fb09                                         out         R7, [#IOP_MAC_OP0S]
046f ---- 8b0c                                         out         R0, [#IOP_MAC_OP1UMUL]
               ;?                 accGet16(0; n);
0470 8620 8938                                         in          R0, [#(IOP_MAC_ACC_READ_BASE + (4 * 0))]
               ;?                 n += b;
0472 ---- 8d25                                         add         R0, R5
               ;?                 d = output.maxModesIFTX[n];
0473 ---- 210a                                         ld          R2, #(systemAgc/output/maxModesIFTX + 0)
0474 ---- af1a                                         ld          R2, [R2+R0]
               ;?                 if(d < a){
0475 ---- ad29                                         cmp         R2, R1
0476 ---- a60e                                         bgeu        /id1080
               ;?                     output.maxModesIFTX[n] = a;
0477 ---- 410a                                             ld          R4, #(systemAgc/output/maxModesIFTX + 0)
0478 ---- 9f3c                                             st          R1, [R4+R0]
               ;?                     while(0 < b){
               /id1085:
0479 ---- da00                                             cmp         R5, #0
047a ---- fe09                                             bles        /id1086
               ;?                         n -= 1;
047b ---- 88ff                                                 add         R0, #-1
               ;?                         b -= 1;
047c ---- d8ff                                                 add         R5, #-1
               ;?                         e = output.maxModesIFTX[n];
047d ---- 310a                                                 ld          R3, #(systemAgc/output/maxModesIFTX + 0)
047e ---- bf1b                                                 ld          R3, [R3+R0]
               ;?                         output.maxModesIFTX[n] = d;
047f ---- 410a                                                 ld          R4, #(systemAgc/output/maxModesIFTX + 0)
0480 ---- af3c                                                 st          R2, [R4+R0]
               ;?                         d = e;
0481 ---- ad43                                                 ld          R2, R3
               ;?                     }
0482 8604 0479                                             jmp         /id1085
               /id1086:
               ;?                     b = 0; // so loop will break
0484 ---- 5000                                             ld          R5, #0
               ;?                 }
               /id1080:
               ;?                 b -=1;
0485 ---- d8ff                                         add         R5, #-1
               ;?             }
0486 8604 046b                                     jmp         /id1069
               /id1070:
               ;?             n = c;
0488 ---- 8d46                                     ld          R0, R6
               ;?             n += 1;
0489 ---- 8801                                     add         R0, #1
               ;?         }
048a 8604 0438                                 jmp         /id1018
               /id1019:
               ;?         n = 0;
048c ---- 0000                                 ld          R0, #0
               ;?         f += 1;
048d ---- f801                                 add         R7, #1
               ;?
               ;?     }
048e 8604 0435                             jmp         /id1014
               /id1015:
               ;?
               ;?     if(state.tddMode == 1){
0490 ---- 0a3e                             ld          R0, [#systemAgc/state/tddMode]
0491 ---- 8a01                             cmp         R0, #1
0492 ---- be03                             bneq        /id1101
               ;?         cfg.samplesCount -= 1;
0493 ---- 08c1                                 ld          R0, [#systemAgc/cfg/samplesCount]
0494 ---- 88ff                                 add         R0, #-1
0495 ---- 0cc1                                 st          R0, [#systemAgc/cfg/samplesCount]
               ;?     }
               /id1101:
               ;?
               ;?     n = 0;
0496 ---- 0000                             ld          R0, #0
               ;?     a = 0;
0497 ---- 1000                             ld          R1, #0
               ;?     b = 0;
0498 ---- 5000                             ld          R5, #0
               ;?     c = 0;
0499 ---- 6000                             ld          R6, #0
               ;?     d = 0;
049a ---- 2000                             ld          R2, #0
               ;?     e = 0;
               ;?     f = 0;
049b ---- 7000                             ld          R7, #0
               ;?     // after 5 cycles of measures
               ;?     if(cfg.samplesCount == 0){
049c ---- 38c1                             ld          R3, [#systemAgc/cfg/samplesCount]
049d ---- ba00                             cmp         R3, #0
049e ---- be44                             bneq        /id1112
               ;?
               ;?         // we now have in output.maxModes array with top 20% of results for each channel. channel0, channel1...
               ;?         // from the top 20% results we sort by ranges for each channel to determine which range has most results
               ;?
               ;?         // clear values in modes arrays
               ;?         while(n<CHANNELS_NUMBER){
               /id1114:
049f ---- 8a04                                 cmp         R0, #4
04a0 ---- a609                                 bgeu        /id1115
               ;?             output.channelsMaxRFTX[n] = 0;
04a1 ---- 3000                                     ld          R3, #0
04a2 ---- 40d6                                     ld          R4, #(systemAgc/output/channelsMaxRFTX + 0)
04a3 ---- bf3c                                     st          R3, [R4+R0]
               ;?             output.channelsMaxIFTX[n] = 0;
04a4 ---- 3000                                     ld          R3, #0
04a5 ---- 40ce                                     ld          R4, #(systemAgc/output/channelsMaxIFTX + 0)
04a6 ---- bf3c                                     st          R3, [R4+R0]
               ;?             n +=1;
04a7 ---- 8801                                     add         R0, #1
               ;?         }
04a8 8604 049f                                 jmp         /id1114
               /id1115:
               ;?
               ;?         n = 0;
04aa ---- 0000                                 ld          R0, #0
               ;?         while(f<cfg.channelsNum){
               /id1123:
04ab ---- 38b8                                 ld          R3, [#systemAgc/cfg/channelsNum]
04ac ---- fd2b                                 cmp         R7, R3
04ad ---- a61b                                 bgeu        /id1124
               ;?             while(a<MODES_CHANNEL_SIZE){
               /id1127:
04ae ---- 9a0c                                     cmp         R1, #12
04af ---- a615                                     bgeu        /id1128
               ;?                 b = n;
04b0 ---- dd40                                         ld          R5, R0
               ;?                 c = output.maxModesRFTX[n];
04b1 ---- 216a                                         ld          R2, #(systemAgc/output/maxModesRFTX + 0)
04b2 ---- ef1a                                         ld          R6, [R2+R0]
               ;?                 d = output.maxModesIFTX[n];
04b3 ---- 210a                                         ld          R2, #(systemAgc/output/maxModesIFTX + 0)
04b4 ---- af1a                                         ld          R2, [R2+R0]
               ;?                 n = f;
04b5 ---- 8d47                                         ld          R0, R7
               ;?                 output.channelsMaxRFTX[n] += c;
04b6 ---- 30d6                                         ld          R3, #(systemAgc/output/channelsMaxRFTX + 0)
04b7 ---- bf1b                                         ld          R3, [R3+R0]
04b8 ---- bd26                                         add         R3, R6
04b9 ---- 40d6                                         ld          R4, #(systemAgc/output/channelsMaxRFTX + 0)
04ba ---- bf3c                                         st          R3, [R4+R0]
               ;?                 output.channelsMaxIFTX[n] += d;
04bb ---- 30ce                                         ld          R3, #(systemAgc/output/channelsMaxIFTX + 0)
04bc ---- bf1b                                         ld          R3, [R3+R0]
04bd ---- bd22                                         add         R3, R2
04be ---- 40ce                                         ld          R4, #(systemAgc/output/channelsMaxIFTX + 0)
04bf ---- bf3c                                         st          R3, [R4+R0]
               ;?                 a+=1;
04c0 ---- 9801                                         add         R1, #1
               ;?                 n = b;
04c1 ---- 8d45                                         ld          R0, R5
               ;?                 n+=1;
04c2 ---- 8801                                         add         R0, #1
               ;?             }
04c3 8604 04ae                                     jmp         /id1127
               /id1128:
               ;?             a = 0;
04c5 ---- 1000                                     ld          R1, #0
               ;?             f += 1;
04c6 ---- f801                                     add         R7, #1
               ;?         }
04c7 8604 04ab                                 jmp         /id1123
               /id1124:
               ;?
               ;?         // clear values in modes arrays
               ;?         n = 0;
04c9 ---- 0000                                 ld          R0, #0
               ;?         while(n<MODES_SIZE){
               /id1154:
04ca ---- 8a30                                 cmp         R0, #48
04cb ---- a609                                 bgeu        /id1155
               ;?             output.maxModesRFTX[n] = 0;
04cc ---- 1000                                     ld          R1, #0
04cd ---- 216a                                     ld          R2, #(systemAgc/output/maxModesRFTX + 0)
04ce ---- 9f3a                                     st          R1, [R2+R0]
               ;?             output.maxModesIFTX[n] = 0;
04cf ---- 1000                                     ld          R1, #0
04d0 ---- 210a                                     ld          R2, #(systemAgc/output/maxModesIFTX + 0)
04d1 ---- 9f3a                                     st          R1, [R2+R0]
               ;?             n += 1;
04d2 ---- 8801                                     add         R0, #1
               ;?         }
04d3 8604 04ca                                 jmp         /id1154
               /id1155:
               ;?         n = 0;
               ;?         cfg.samplesCount = SAMPLE_SIZE;
04d5 ---- 0003                                 ld          R0, #3
04d6 ---- 0cc1                                 st          R0, [#systemAgc/cfg/samplesCount]
               ;?         rtlLogStructs(BV_RTL_LOG_OUTPUT);
04d7 ---- 0004                                 ld          R0, #4
04d8 ---- 18ab                                 ld          R1, [#(pRtlTaskLogMaskTable + 0)]
04d9 ---- 8d01                                 and         R0, R1
04da ---- 0caa                                 st          R0, [#(pRtlTaskLogReqTable + 0)]
               ;?         // if interrupt flag is enabled, raises the interrupt for application to process results
               ;?         if(state.alertEnabled == 1) {
04db ---- 0a3a                                 ld          R0, [#systemAgc/state/alertEnabled]
04dc ---- 8a01                                 cmp         R0, #1
04dd ---- be05                                 bneq        /id1166
               ;?             state.alertEnabled = 0;
04de ---- 0000                                     ld          R0, #0
04df ---- 0e3a                                     st          R0, [#systemAgc/state/alertEnabled]
               ;?             fwGenQuickAlertInterrupt();
04e0 ---- 6540                                     iobset      #IOB_EVCTL_SWEV_ALERT, [#IOP_EVCTL_SWEVSET]
04e1 ---- 0000                                     ld          R0, #0
04e2 ---- 0caf                                     st          R0, [#fwCtrlInt/alertGenMask]
               ;?         }
               /id1166:
               ;?     }
               /id1112:
               ;?
               ;?
               ;?     // Stop the ADC trigger and flush the ADC FIFO
               ;?     //timer0Stop();
               ;?     //adcFlushFifo();
               ;?
               ;?
               ;?     // schedule the next task execution
               ;?     //evhSetupGpioTrigger(0, AUXIO_I_TDD_LOCK, 0, EVH_GPIO_TRIG_ON_MATCH);
               ;?     // for testing
               ;?     //fwScheduleTask(1);
               ;?     adcDisable();
04e3 8605 1526                             jsr         AdcDisable
               ;?     if(state.tddMode == 2){
04e5 ---- 0a3e                             ld          R0, [#systemAgc/state/tddMode]
04e6 ---- 8a02                             cmp         R0, #2
04e7 ---- be07                             bneq        /id1171
               ;?         evhSetupGpioTrigger(0, AUXIO_I_TDD_LOCK, 0, EVH_GPIO_TRIG_ON_MATCH);
04e8 ---- 0083                                 ld          R0, #((3 + SYSIF_PROGWUCFG_SRC_AUXIO0) |((0 == 0) << IOB_SYSIF_PROGWUCFG_POL))
04e9 ---- 8b56                                 out         R0, [#((IOP_SYSIF_PROGWU1CFG + 0) + 0)]
04ea ---- 655b                                 iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 0), [#IOP_SYSIF_WUFLAGSCLR]
04eb ---- 455b                                 iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 0), [#IOP_SYSIF_WUFLAGSCLR]
04ec ---- 7656                                 iobset      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 0) + 0)]
               ;?         //evhSetupGpioTrigger(0, AUXIO_I_TDD_SYNCH, 1, EVH_GPIO_TRIG_ON_EDGE);
               ;?         //evhSetupTimer0Trigger(0, 100, 2);
               ;?     }else{
04ed 8604 04fa                             jmp         /id1173
               /id1171:
               ;?         evhSetupTimer0Trigger(0, 1, 2);
04ef ---- 0001                                 ld          R0, #1
04f0 ---- 8b81                                 out         R0, [#IOP_TIMER01_T0TARGET]
04f1 8623 0322                                 ld          R0, #(((2 << IOB_TIMER01_TXCFG_PRE) | TIMER01_TXCFG_TICK_SRC_AON_RTC_4KHZ) | BV_TIMER01_TXCFG_MODE_TICK)
04f3 ---- 8b7d                                 out         R0, [#IOP_TIMER01_T0CFG]
04f4 ---- 0036                                 ld          R0, #SYSIF_PROGWUCFG_SRC_AUX_TIMER0_EV
04f5 ---- 8b56                                 out         R0, [#((IOP_SYSIF_PROGWU1CFG + 0) + 0)]
04f6 ---- 655b                                 iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 0), [#IOP_SYSIF_WUFLAGSCLR]
04f7 ---- 455b                                 iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 0), [#IOP_SYSIF_WUFLAGSCLR]
04f8 ---- 7656                                 iobset      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 0) + 0)]
04f9 ---- 647f                                 iobset      #0, [#IOP_TIMER01_T0CTL]
               ;?     }
               /id1173:
               ;? }else{
04fa 8605 0507                         jmp         /id0906
               /id0904:
               ;?     evhSetupTimer0Trigger(0, 1, 2);
04fc ---- 0001                             ld          R0, #1
04fd ---- 8b81                             out         R0, [#IOP_TIMER01_T0TARGET]
04fe 8623 0322                             ld          R0, #(((2 << IOB_TIMER01_TXCFG_PRE) | TIMER01_TXCFG_TICK_SRC_AON_RTC_4KHZ) | BV_TIMER01_TXCFG_MODE_TICK)
0500 ---- 8b7d                             out         R0, [#IOP_TIMER01_T0CFG]
0501 ---- 0036                             ld          R0, #SYSIF_PROGWUCFG_SRC_AUX_TIMER0_EV
0502 ---- 8b56                             out         R0, [#((IOP_SYSIF_PROGWU1CFG + 0) + 0)]
0503 ---- 655b                             iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 0), [#IOP_SYSIF_WUFLAGSCLR]
0504 ---- 455b                             iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 0), [#IOP_SYSIF_WUFLAGSCLR]
0505 ---- 7656                             iobset      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 0) + 0)]
0506 ---- 647f                             iobset      #0, [#IOP_TIMER01_T0CTL]
               ;? }
               /id0906:
               systemAgc/event2Done:
0507 ---- adb7                         rts




               systemAgc/terminate:
               ;?
               systemAgc/terminateDone:
0508 ---- adb7                         rts
               .segment end "Task: System AGC"


               .segment begin "Procedure Library"
               ; PARAMETERS:
               ;     R7 = AUX I/O index
               ;
               ; CLOBBERS:
               ;     R5, R6, R7
               gpioSetOutput:
                                       ; Calculate the I/O register address
0509 ---- ed47                         ld          R6, R7
050a ---- edab                         lsr         R6, #3
050b 8600 e8c2                         add         R6, #IOP_AIODIO0_GPIODOUTSET

                                       ; Create the bit-vector to be used for manipulation
050d ---- f007                         and         R7, #0x0007
050e ---- 5001                         ld          R5, #1
050f ---- dd87                         lsl         R5, R7

                                       ; Set the GPIO
0510 ---- df26                         out         R5, [R6]
0511 ---- adb7                         rts




               ; PARAMETERS:
               ;     R7 = AUX I/O index
               ;
               ; CLOBBERS:
               ;     R5, R6, R7
               gpioClearOutput:
                                       ; Calculate the I/O register address
0512 ---- ed47                         ld          R6, R7
0513 ---- edab                         lsr         R6, #3
0514 8600 e8c6                         add         R6, #IOP_AIODIO0_GPIODOUTCLR

                                       ; Create the bit-vector to be used for manipulation
0516 ---- f007                         and         R7, #0x0007
0517 ---- 5001                         ld          R5, #1
0518 ---- dd87                         lsl         R5, R7

                                       ; Set the GPIO
0519 ---- df26                         out         R5, [R6]
051a ---- adb7                         rts




               ; PARAMETERS:
               ;     R7 = AUX I/O index (19-26)
               ;
               ; CLOBBERS:
               ;     R6, R7
               AdccompbSelectGpioInput:
                                       ; Make sure that the AUX I/O index is valid
051b ---- f8ed                         add         R7, #-ADI_ANALOG_MUX_AUXIO_BASE_INDEX
051c ---- f007                         and         R7, #0x0007

                                       ; Disconnect all signals
051d 86ff 63f8                         ld          R6, #(BV_ADI16_MUX2_ADCCOMPB_IN | BV_ADI16_MUX3_ADCCOMPB_IN)
051f ---- eba3                         out         R6, [#IOP_ADICLR_MUX2_MUX3]

                                       ; Connect the specified GPIO
0520 8680 6000                         ld          R6, #ADI16_MUX3_ADCCOMPB_IN_AUXIO0
0522 ---- ed8f                         lsr         R6, R7
0523 ---- eb9b                         out         R6, [#IOP_ADISET_MUX2_MUX3]

                                       ; Flush the ADI interface
0524 ---- eb9b                         out         R6, [#IOP_ADISET_MUX2_MUX3]

0525 ---- adb7                         rts




               ; CLOBBERS:
               ;     R7
               AdcDisable:
                                       ; Disable the ADC reference
0526 ---- 7079                         ld          R7, #((ADI16_ADCREF_EN | ADI16_ADCREF_REF_ON_IDLE) | (ADI16_ADCREF_SRC | (ADI16_ADCREF_EXT | ADI16_ADCREF_IOMUX)))
0527 ---- fba7                         out         R7, [#IOP_ADICLR_ADCREF]

                                       ; Assert reset and disable the ADC
0528 ---- 71fb                         ld          R7, #((ADI16_ADC_EN | ADI16_ADC_RESET_N) | (BV_ADI16_ADC_SMPL_CYCLE_EXP | (BV_ADI16_ADC_SMPL_MODE | ADI16_ADC_SCALE_DIS)))
0529 ---- fba6                         out         R7, [#IOP_ADICLR_ADC]

                                       ; Flush the ADI interface
052a ---- fba6                         out         R7, [#IOP_ADICLR_ADC]

                                       ; Disable the ADC clock (no need to wait since IOB_SYSIF_ADCCLKCTL_ACK goes low immediately)
052b ---- 4467                         iobclr      #IOB_SYSIF_ADCCLKCTL_REQ, [#IOP_SYSIF_ADCCLKCTL]

                                       ; Disable the ADC data interface
052c ---- 448e                         iobclr      #0, [#IOP_ANAIF_ADCCTL]

052d ---- adb7                         rts
               .segment end "Procedure Library"


; Generated by LAPTOP-2C67QHF3 at 2022-05-02 14:06:59.117
